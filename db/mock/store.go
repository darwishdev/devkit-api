// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/darwishdev/devkit-api/db (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	db "github.com/darwishdev/devkit-api/db"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AuthUserIDFindByEmail mocks base method.
func (m *MockStore) AuthUserIDFindByEmail(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUserIDFindByEmail", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUserIDFindByEmail indicates an expected call of AuthUserIDFindByEmail.
func (mr *MockStoreMockRecorder) AuthUserIDFindByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUserIDFindByEmail", reflect.TypeOf((*MockStore)(nil).AuthUserIDFindByEmail), arg0, arg1)
}

// DbErrorParser mocks base method.
func (m *MockStore) DbErrorParser(arg0 error, arg1 map[string]string) *connect.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbErrorParser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Error)
	return ret0
}

// DbErrorParser indicates an expected call of DbErrorParser.
func (mr *MockStoreMockRecorder) DbErrorParser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbErrorParser", reflect.TypeOf((*MockStore)(nil).DbErrorParser), arg0, arg1)
}

// ExecTX mocks base method.
func (m *MockStore) ExecTX(arg0 context.Context, arg1 func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTX", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTX indicates an expected call of ExecTX.
func (mr *MockStoreMockRecorder) ExecTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTX", reflect.TypeOf((*MockStore)(nil).ExecTX), arg0, arg1)
}

// IconsCreateUpdateBulk mocks base method.
func (m *MockStore) IconsCreateUpdateBulk(arg0 context.Context, arg1 db.IconsCreateUpdateBulkParams) ([]db.Icon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IconsCreateUpdateBulk", arg0, arg1)
	ret0, _ := ret[0].([]db.Icon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IconsCreateUpdateBulk indicates an expected call of IconsCreateUpdateBulk.
func (mr *MockStoreMockRecorder) IconsCreateUpdateBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IconsCreateUpdateBulk", reflect.TypeOf((*MockStore)(nil).IconsCreateUpdateBulk), arg0, arg1)
}

// IconsInputList mocks base method.
func (m *MockStore) IconsInputList(arg0 context.Context) ([]db.Icon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IconsInputList", arg0)
	ret0, _ := ret[0].([]db.Icon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IconsInputList indicates an expected call of IconsInputList.
func (mr *MockStoreMockRecorder) IconsInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IconsInputList", reflect.TypeOf((*MockStore)(nil).IconsInputList), arg0)
}

// RoleCreateUpdate mocks base method.
func (m *MockStore) RoleCreateUpdate(arg0 context.Context, arg1 db.RoleCreateUpdateParams) (db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleCreateUpdate indicates an expected call of RoleCreateUpdate.
func (mr *MockStoreMockRecorder) RoleCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleCreateUpdate", reflect.TypeOf((*MockStore)(nil).RoleCreateUpdate), arg0, arg1)
}

// RolesDeleteRestore mocks base method.
func (m *MockStore) RolesDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolesDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RolesDeleteRestore indicates an expected call of RolesDeleteRestore.
func (mr *MockStoreMockRecorder) RolesDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolesDeleteRestore", reflect.TypeOf((*MockStore)(nil).RolesDeleteRestore), arg0, arg1)
}

// RolesList mocks base method.
func (m *MockStore) RolesList(arg0 context.Context) ([]db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolesList", arg0)
	ret0, _ := ret[0].([]db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolesList indicates an expected call of RolesList.
func (mr *MockStoreMockRecorder) RolesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolesList", reflect.TypeOf((*MockStore)(nil).RolesList), arg0)
}

// SettingsFindForUpdate mocks base method.
func (m *MockStore) SettingsFindForUpdate(arg0 context.Context) ([]db.SettingsFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingsFindForUpdate", arg0)
	ret0, _ := ret[0].([]db.SettingsFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingsFindForUpdate indicates an expected call of SettingsFindForUpdate.
func (mr *MockStoreMockRecorder) SettingsFindForUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingsFindForUpdate", reflect.TypeOf((*MockStore)(nil).SettingsFindForUpdate), arg0)
}

// SettingsUpdate mocks base method.
func (m *MockStore) SettingsUpdate(arg0 context.Context, arg1 db.SettingsUpdateParams) (db.SettingsUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingsUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.SettingsUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingsUpdate indicates an expected call of SettingsUpdate.
func (mr *MockStoreMockRecorder) SettingsUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingsUpdate", reflect.TypeOf((*MockStore)(nil).SettingsUpdate), arg0, arg1)
}

// TranslationsCreateUpdateBulk mocks base method.
func (m *MockStore) TranslationsCreateUpdateBulk(arg0 context.Context, arg1 db.TranslationsCreateUpdateBulkParams) ([]db.TranslationsCreateUpdateBulkRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslationsCreateUpdateBulk", arg0, arg1)
	ret0, _ := ret[0].([]db.TranslationsCreateUpdateBulkRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslationsCreateUpdateBulk indicates an expected call of TranslationsCreateUpdateBulk.
func (mr *MockStoreMockRecorder) TranslationsCreateUpdateBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslationsCreateUpdateBulk", reflect.TypeOf((*MockStore)(nil).TranslationsCreateUpdateBulk), arg0, arg1)
}

// TranslationsDelete mocks base method.
func (m *MockStore) TranslationsDelete(arg0 context.Context, arg1 []string) ([]db.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslationsDelete", arg0, arg1)
	ret0, _ := ret[0].([]db.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslationsDelete indicates an expected call of TranslationsDelete.
func (mr *MockStoreMockRecorder) TranslationsDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslationsDelete", reflect.TypeOf((*MockStore)(nil).TranslationsDelete), arg0, arg1)
}

// TranslationsList mocks base method.
func (m *MockStore) TranslationsList(arg0 context.Context) ([]db.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslationsList", arg0)
	ret0, _ := ret[0].([]db.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslationsList indicates an expected call of TranslationsList.
func (mr *MockStoreMockRecorder) TranslationsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslationsList", reflect.TypeOf((*MockStore)(nil).TranslationsList), arg0)
}

// UserCreateUpdate mocks base method.
func (m *MockStore) UserCreateUpdate(arg0 context.Context, arg1 db.UserCreateUpdateParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreateUpdate indicates an expected call of UserCreateUpdate.
func (mr *MockStoreMockRecorder) UserCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateUpdate", reflect.TypeOf((*MockStore)(nil).UserCreateUpdate), arg0, arg1)
}

// UserDelete mocks base method.
func (m *MockStore) UserDelete(arg0 context.Context, arg1 int32) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockStoreMockRecorder) UserDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockStore)(nil).UserDelete), arg0, arg1)
}

// UserFind mocks base method.
func (m *MockStore) UserFind(arg0 context.Context, arg1 db.UserFindParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFind", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFind indicates an expected call of UserFind.
func (mr *MockStoreMockRecorder) UserFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFind", reflect.TypeOf((*MockStore)(nil).UserFind), arg0, arg1)
}

// UserFindNavigationBars mocks base method.
func (m *MockStore) UserFindNavigationBars(arg0 context.Context, arg1 int32) ([]db.UserFindNavigationBarsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindNavigationBars", arg0, arg1)
	ret0, _ := ret[0].([]db.UserFindNavigationBarsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindNavigationBars indicates an expected call of UserFindNavigationBars.
func (mr *MockStoreMockRecorder) UserFindNavigationBars(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindNavigationBars", reflect.TypeOf((*MockStore)(nil).UserFindNavigationBars), arg0, arg1)
}

// UserPermissionsMap mocks base method.
func (m *MockStore) UserPermissionsMap(arg0 context.Context, arg1 int32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPermissionsMap", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPermissionsMap indicates an expected call of UserPermissionsMap.
func (mr *MockStoreMockRecorder) UserPermissionsMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermissionsMap", reflect.TypeOf((*MockStore)(nil).UserPermissionsMap), arg0, arg1)
}

// UsersDeleteRestore mocks base method.
func (m *MockStore) UsersDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UsersDeleteRestore indicates an expected call of UsersDeleteRestore.
func (mr *MockStoreMockRecorder) UsersDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersDeleteRestore", reflect.TypeOf((*MockStore)(nil).UsersDeleteRestore), arg0, arg1)
}

// UsersList mocks base method.
func (m *MockStore) UsersList(arg0 context.Context) ([]db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersList", arg0)
	ret0, _ := ret[0].([]db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersList indicates an expected call of UsersList.
func (mr *MockStoreMockRecorder) UsersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersList", reflect.TypeOf((*MockStore)(nil).UsersList), arg0)
}
