// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/darwishdev/devkit-api/db (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	db "github.com/darwishdev/devkit-api/db"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AuthUserIDFindByEmail mocks base method.
func (m *MockStore) AuthUserIDFindByEmail(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUserIDFindByEmail", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUserIDFindByEmail indicates an expected call of AuthUserIDFindByEmail.
func (mr *MockStoreMockRecorder) AuthUserIDFindByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUserIDFindByEmail", reflect.TypeOf((*MockStore)(nil).AuthUserIDFindByEmail), arg0, arg1)
}

// CityList mocks base method.
func (m *MockStore) CityList(arg0 context.Context) ([]db.PropertiesSchemaCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityList", arg0)
	ret0, _ := ret[0].([]db.PropertiesSchemaCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityList indicates an expected call of CityList.
func (mr *MockStoreMockRecorder) CityList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityList", reflect.TypeOf((*MockStore)(nil).CityList), arg0)
}

// CityListInput mocks base method.
func (m *MockStore) CityListInput(arg0 context.Context) ([]db.CityListInputRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityListInput", arg0)
	ret0, _ := ret[0].([]db.CityListInputRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityListInput indicates an expected call of CityListInput.
func (mr *MockStoreMockRecorder) CityListInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityListInput", reflect.TypeOf((*MockStore)(nil).CityListInput), arg0)
}

// DbErrorParser mocks base method.
func (m *MockStore) DbErrorParser(arg0 error, arg1 map[string]string) *connect.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbErrorParser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Error)
	return ret0
}

// DbErrorParser indicates an expected call of DbErrorParser.
func (mr *MockStoreMockRecorder) DbErrorParser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbErrorParser", reflect.TypeOf((*MockStore)(nil).DbErrorParser), arg0, arg1)
}

// ExecTX mocks base method.
func (m *MockStore) ExecTX(arg0 context.Context, arg1 func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTX", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTX indicates an expected call of ExecTX.
func (mr *MockStoreMockRecorder) ExecTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTX", reflect.TypeOf((*MockStore)(nil).ExecTX), arg0, arg1)
}

// IconCreateUpdateBulk mocks base method.
func (m *MockStore) IconCreateUpdateBulk(arg0 context.Context, arg1 db.IconCreateUpdateBulkParams) ([]db.Icon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IconCreateUpdateBulk", arg0, arg1)
	ret0, _ := ret[0].([]db.Icon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IconCreateUpdateBulk indicates an expected call of IconCreateUpdateBulk.
func (mr *MockStoreMockRecorder) IconCreateUpdateBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IconCreateUpdateBulk", reflect.TypeOf((*MockStore)(nil).IconCreateUpdateBulk), arg0, arg1)
}

// IconFind mocks base method.
func (m *MockStore) IconFind(arg0 context.Context, arg1 db.IconFindParams) (db.Icon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IconFind", arg0, arg1)
	ret0, _ := ret[0].(db.Icon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IconFind indicates an expected call of IconFind.
func (mr *MockStoreMockRecorder) IconFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IconFind", reflect.TypeOf((*MockStore)(nil).IconFind), arg0, arg1)
}

// IconList mocks base method.
func (m *MockStore) IconList(arg0 context.Context) ([]db.Icon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IconList", arg0)
	ret0, _ := ret[0].([]db.Icon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IconList indicates an expected call of IconList.
func (mr *MockStoreMockRecorder) IconList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IconList", reflect.TypeOf((*MockStore)(nil).IconList), arg0)
}

// LocationList mocks base method.
func (m *MockStore) LocationList(arg0 context.Context) ([]db.PropertiesSchemaLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationList", arg0)
	ret0, _ := ret[0].([]db.PropertiesSchemaLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationList indicates an expected call of LocationList.
func (mr *MockStoreMockRecorder) LocationList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationList", reflect.TypeOf((*MockStore)(nil).LocationList), arg0)
}

// LocationListInput mocks base method.
func (m *MockStore) LocationListInput(arg0 context.Context, arg1 db.LocationListInputParams) ([]db.LocationListInputRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationListInput", arg0, arg1)
	ret0, _ := ret[0].([]db.LocationListInputRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationListInput indicates an expected call of LocationListInput.
func (mr *MockStoreMockRecorder) LocationListInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationListInput", reflect.TypeOf((*MockStore)(nil).LocationListInput), arg0, arg1)
}

// PageCreateUpdate mocks base method.
func (m *MockStore) PageCreateUpdate(arg0 context.Context, arg1 db.PageCreateUpdateParams) (db.TenantsSchemaPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TenantsSchemaPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PageCreateUpdate indicates an expected call of PageCreateUpdate.
func (mr *MockStoreMockRecorder) PageCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageCreateUpdate", reflect.TypeOf((*MockStore)(nil).PageCreateUpdate), arg0, arg1)
}

// PageDeleteRestore mocks base method.
func (m *MockStore) PageDeleteRestore(arg0 context.Context, arg1 []int32) ([]db.TenantsSchemaPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].([]db.TenantsSchemaPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PageDeleteRestore indicates an expected call of PageDeleteRestore.
func (mr *MockStoreMockRecorder) PageDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageDeleteRestore", reflect.TypeOf((*MockStore)(nil).PageDeleteRestore), arg0, arg1)
}

// PageFindForUpdate mocks base method.
func (m *MockStore) PageFindForUpdate(arg0 context.Context, arg1 db.PageFindForUpdateParams) (db.TenantsSchemaPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TenantsSchemaPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PageFindForUpdate indicates an expected call of PageFindForUpdate.
func (mr *MockStoreMockRecorder) PageFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageFindForUpdate", reflect.TypeOf((*MockStore)(nil).PageFindForUpdate), arg0, arg1)
}

// PageList mocks base method.
func (m *MockStore) PageList(arg0 context.Context, arg1 int32) ([]db.TenantsSchemaPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageList", arg0, arg1)
	ret0, _ := ret[0].([]db.TenantsSchemaPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PageList indicates an expected call of PageList.
func (mr *MockStoreMockRecorder) PageList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageList", reflect.TypeOf((*MockStore)(nil).PageList), arg0, arg1)
}

// PartialCreateUpdate mocks base method.
func (m *MockStore) PartialCreateUpdate(arg0 context.Context, arg1 db.PartialCreateUpdateParams) (db.TenantsSchemaPartial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TenantsSchemaPartial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialCreateUpdate indicates an expected call of PartialCreateUpdate.
func (mr *MockStoreMockRecorder) PartialCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialCreateUpdate", reflect.TypeOf((*MockStore)(nil).PartialCreateUpdate), arg0, arg1)
}

// PartialDeleteRestore mocks base method.
func (m *MockStore) PartialDeleteRestore(arg0 context.Context, arg1 []int32) ([]db.TenantsSchemaPartial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].([]db.TenantsSchemaPartial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialDeleteRestore indicates an expected call of PartialDeleteRestore.
func (mr *MockStoreMockRecorder) PartialDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialDeleteRestore", reflect.TypeOf((*MockStore)(nil).PartialDeleteRestore), arg0, arg1)
}

// PartialFindForUpdate mocks base method.
func (m *MockStore) PartialFindForUpdate(arg0 context.Context, arg1 db.PartialFindForUpdateParams) (db.TenantsSchemaPartial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TenantsSchemaPartial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialFindForUpdate indicates an expected call of PartialFindForUpdate.
func (mr *MockStoreMockRecorder) PartialFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialFindForUpdate", reflect.TypeOf((*MockStore)(nil).PartialFindForUpdate), arg0, arg1)
}

// PartialList mocks base method.
func (m *MockStore) PartialList(arg0 context.Context, arg1 int32) ([]db.TenantsSchemaPartial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialList", arg0, arg1)
	ret0, _ := ret[0].([]db.TenantsSchemaPartial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialList indicates an expected call of PartialList.
func (mr *MockStoreMockRecorder) PartialList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialList", reflect.TypeOf((*MockStore)(nil).PartialList), arg0, arg1)
}

// PartialTypeListInput mocks base method.
func (m *MockStore) PartialTypeListInput(arg0 context.Context) ([]db.PartialTypeListInputRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialTypeListInput", arg0)
	ret0, _ := ret[0].([]db.PartialTypeListInputRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialTypeListInput indicates an expected call of PartialTypeListInput.
func (mr *MockStoreMockRecorder) PartialTypeListInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialTypeListInput", reflect.TypeOf((*MockStore)(nil).PartialTypeListInput), arg0)
}

// RoleCreateUpdate mocks base method.
func (m *MockStore) RoleCreateUpdate(arg0 context.Context, arg1 db.RoleCreateUpdateParams) (db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleCreateUpdate indicates an expected call of RoleCreateUpdate.
func (mr *MockStoreMockRecorder) RoleCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleCreateUpdate", reflect.TypeOf((*MockStore)(nil).RoleCreateUpdate), arg0, arg1)
}

// RoleDelete mocks base method.
func (m *MockStore) RoleDelete(arg0 context.Context, arg1 db.RoleDeleteParams) (db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleDelete", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleDelete indicates an expected call of RoleDelete.
func (mr *MockStoreMockRecorder) RoleDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleDelete", reflect.TypeOf((*MockStore)(nil).RoleDelete), arg0, arg1)
}

// RoleDeleteRestore mocks base method.
func (m *MockStore) RoleDeleteRestore(arg0 context.Context, arg1 db.RoleDeleteRestoreParams) (db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleDeleteRestore indicates an expected call of RoleDeleteRestore.
func (mr *MockStoreMockRecorder) RoleDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleDeleteRestore", reflect.TypeOf((*MockStore)(nil).RoleDeleteRestore), arg0, arg1)
}

// RoleFindForUpdate mocks base method.
func (m *MockStore) RoleFindForUpdate(arg0 context.Context, arg1 int32) (db.RoleFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.RoleFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleFindForUpdate indicates an expected call of RoleFindForUpdate.
func (mr *MockStoreMockRecorder) RoleFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleFindForUpdate", reflect.TypeOf((*MockStore)(nil).RoleFindForUpdate), arg0, arg1)
}

// RoleList mocks base method.
func (m *MockStore) RoleList(arg0 context.Context) ([]db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleList", arg0)
	ret0, _ := ret[0].([]db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleList indicates an expected call of RoleList.
func (mr *MockStoreMockRecorder) RoleList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleList", reflect.TypeOf((*MockStore)(nil).RoleList), arg0)
}

// RoleListInput mocks base method.
func (m *MockStore) RoleListInput(arg0 context.Context, arg1 int32) ([]db.RoleListInputRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleListInput", arg0, arg1)
	ret0, _ := ret[0].([]db.RoleListInputRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleListInput indicates an expected call of RoleListInput.
func (mr *MockStoreMockRecorder) RoleListInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleListInput", reflect.TypeOf((*MockStore)(nil).RoleListInput), arg0, arg1)
}

// SectionCreateUpdate mocks base method.
func (m *MockStore) SectionCreateUpdate(arg0 context.Context, arg1 db.SectionCreateUpdateParams) (db.TenantsSchemaSection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectionCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TenantsSchemaSection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectionCreateUpdate indicates an expected call of SectionCreateUpdate.
func (mr *MockStoreMockRecorder) SectionCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectionCreateUpdate", reflect.TypeOf((*MockStore)(nil).SectionCreateUpdate), arg0, arg1)
}

// SectionDeleteRestore mocks base method.
func (m *MockStore) SectionDeleteRestore(arg0 context.Context, arg1 []int32) ([]db.TenantsSchemaSection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectionDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].([]db.TenantsSchemaSection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectionDeleteRestore indicates an expected call of SectionDeleteRestore.
func (mr *MockStoreMockRecorder) SectionDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectionDeleteRestore", reflect.TypeOf((*MockStore)(nil).SectionDeleteRestore), arg0, arg1)
}

// SectionFind mocks base method.
func (m *MockStore) SectionFind(arg0 context.Context, arg1 db.SectionFindParams) (db.TenantsSchemaSection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectionFind", arg0, arg1)
	ret0, _ := ret[0].(db.TenantsSchemaSection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectionFind indicates an expected call of SectionFind.
func (mr *MockStoreMockRecorder) SectionFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectionFind", reflect.TypeOf((*MockStore)(nil).SectionFind), arg0, arg1)
}

// SectionList mocks base method.
func (m *MockStore) SectionList(arg0 context.Context, arg1 int32) ([]db.TenantsSchemaSection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectionList", arg0, arg1)
	ret0, _ := ret[0].([]db.TenantsSchemaSection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectionList indicates an expected call of SectionList.
func (mr *MockStoreMockRecorder) SectionList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectionList", reflect.TypeOf((*MockStore)(nil).SectionList), arg0, arg1)
}

// SectionListInpt mocks base method.
func (m *MockStore) SectionListInpt(arg0 context.Context) ([]db.SectionListInptRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectionListInpt", arg0)
	ret0, _ := ret[0].([]db.SectionListInptRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectionListInpt indicates an expected call of SectionListInpt.
func (mr *MockStoreMockRecorder) SectionListInpt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectionListInpt", reflect.TypeOf((*MockStore)(nil).SectionListInpt), arg0)
}

// SettingFindForUpdate mocks base method.
func (m *MockStore) SettingFindForUpdate(arg0 context.Context) ([]db.SettingFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingFindForUpdate", arg0)
	ret0, _ := ret[0].([]db.SettingFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingFindForUpdate indicates an expected call of SettingFindForUpdate.
func (mr *MockStoreMockRecorder) SettingFindForUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingFindForUpdate", reflect.TypeOf((*MockStore)(nil).SettingFindForUpdate), arg0)
}

// SettingUpdate mocks base method.
func (m *MockStore) SettingUpdate(arg0 context.Context, arg1 db.SettingUpdateParams) (db.SettingUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.SettingUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingUpdate indicates an expected call of SettingUpdate.
func (mr *MockStoreMockRecorder) SettingUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingUpdate", reflect.TypeOf((*MockStore)(nil).SettingUpdate), arg0, arg1)
}

// StorageFileDelete mocks base method.
func (m *MockStore) StorageFileDelete(arg0 context.Context, arg1 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageFileDelete", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageFileDelete indicates an expected call of StorageFileDelete.
func (mr *MockStoreMockRecorder) StorageFileDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageFileDelete", reflect.TypeOf((*MockStore)(nil).StorageFileDelete), arg0, arg1)
}

// StorageFileDeleteByBucket mocks base method.
func (m *MockStore) StorageFileDeleteByBucket(arg0 context.Context, arg1 []string, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageFileDeleteByBucket", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageFileDeleteByBucket indicates an expected call of StorageFileDeleteByBucket.
func (mr *MockStoreMockRecorder) StorageFileDeleteByBucket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageFileDeleteByBucket", reflect.TypeOf((*MockStore)(nil).StorageFileDeleteByBucket), arg0, arg1, arg2)
}

// TenantCreateUpdate mocks base method.
func (m *MockStore) TenantCreateUpdate(arg0 context.Context, arg1 db.TenantCreateUpdateParams) (db.TenantsSchemaTenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TenantsSchemaTenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantCreateUpdate indicates an expected call of TenantCreateUpdate.
func (mr *MockStoreMockRecorder) TenantCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantCreateUpdate", reflect.TypeOf((*MockStore)(nil).TenantCreateUpdate), arg0, arg1)
}

// TenantDeleteRestore mocks base method.
func (m *MockStore) TenantDeleteRestore(arg0 context.Context, arg1 []int32) ([]db.TenantsSchemaTenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].([]db.TenantsSchemaTenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantDeleteRestore indicates an expected call of TenantDeleteRestore.
func (mr *MockStoreMockRecorder) TenantDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantDeleteRestore", reflect.TypeOf((*MockStore)(nil).TenantDeleteRestore), arg0, arg1)
}

// TenantFind mocks base method.
func (m *MockStore) TenantFind(arg0 context.Context, arg1 int32) (db.TenantFindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantFind", arg0, arg1)
	ret0, _ := ret[0].(db.TenantFindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantFind indicates an expected call of TenantFind.
func (mr *MockStoreMockRecorder) TenantFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantFind", reflect.TypeOf((*MockStore)(nil).TenantFind), arg0, arg1)
}

// TenantList mocks base method.
func (m *MockStore) TenantList(arg0 context.Context, arg1 int32) ([]db.TenantsSchemaTenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantList", arg0, arg1)
	ret0, _ := ret[0].([]db.TenantsSchemaTenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantList indicates an expected call of TenantList.
func (mr *MockStoreMockRecorder) TenantList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantList", reflect.TypeOf((*MockStore)(nil).TenantList), arg0, arg1)
}

// TranslationCreateUpdateBulk mocks base method.
func (m *MockStore) TranslationCreateUpdateBulk(arg0 context.Context, arg1 db.TranslationCreateUpdateBulkParams) ([]db.TranslationCreateUpdateBulkRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslationCreateUpdateBulk", arg0, arg1)
	ret0, _ := ret[0].([]db.TranslationCreateUpdateBulkRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslationCreateUpdateBulk indicates an expected call of TranslationCreateUpdateBulk.
func (mr *MockStoreMockRecorder) TranslationCreateUpdateBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslationCreateUpdateBulk", reflect.TypeOf((*MockStore)(nil).TranslationCreateUpdateBulk), arg0, arg1)
}

// TranslationDelete mocks base method.
func (m *MockStore) TranslationDelete(arg0 context.Context, arg1 []string) ([]db.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslationDelete", arg0, arg1)
	ret0, _ := ret[0].([]db.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslationDelete indicates an expected call of TranslationDelete.
func (mr *MockStoreMockRecorder) TranslationDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslationDelete", reflect.TypeOf((*MockStore)(nil).TranslationDelete), arg0, arg1)
}

// TranslationList mocks base method.
func (m *MockStore) TranslationList(arg0 context.Context) ([]db.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslationList", arg0)
	ret0, _ := ret[0].([]db.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslationList indicates an expected call of TranslationList.
func (mr *MockStoreMockRecorder) TranslationList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslationList", reflect.TypeOf((*MockStore)(nil).TranslationList), arg0)
}

// UserCreateUpdate mocks base method.
func (m *MockStore) UserCreateUpdate(arg0 context.Context, arg1 db.UserCreateUpdateParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreateUpdate indicates an expected call of UserCreateUpdate.
func (mr *MockStoreMockRecorder) UserCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateUpdate", reflect.TypeOf((*MockStore)(nil).UserCreateUpdate), arg0, arg1)
}

// UserDelete mocks base method.
func (m *MockStore) UserDelete(arg0 context.Context, arg1 db.UserDeleteParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockStoreMockRecorder) UserDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockStore)(nil).UserDelete), arg0, arg1)
}

// UserDeleteRestore mocks base method.
func (m *MockStore) UserDeleteRestore(arg0 context.Context, arg1 db.UserDeleteRestoreParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDeleteRestore indicates an expected call of UserDeleteRestore.
func (mr *MockStoreMockRecorder) UserDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteRestore", reflect.TypeOf((*MockStore)(nil).UserDeleteRestore), arg0, arg1)
}

// UserFind mocks base method.
func (m *MockStore) UserFind(arg0 context.Context, arg1 db.UserFindParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFind", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFind indicates an expected call of UserFind.
func (mr *MockStoreMockRecorder) UserFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFind", reflect.TypeOf((*MockStore)(nil).UserFind), arg0, arg1)
}

// UserFindForToken mocks base method.
func (m *MockStore) UserFindForToken(arg0 context.Context, arg1 db.UserFindForTokenParams) (db.UserFindForTokenRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindForToken", arg0, arg1)
	ret0, _ := ret[0].(db.UserFindForTokenRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindForToken indicates an expected call of UserFindForToken.
func (mr *MockStoreMockRecorder) UserFindForToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindForToken", reflect.TypeOf((*MockStore)(nil).UserFindForToken), arg0, arg1)
}

// UserFindForUpdate mocks base method.
func (m *MockStore) UserFindForUpdate(arg0 context.Context, arg1 int32) (db.UserFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.UserFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindForUpdate indicates an expected call of UserFindForUpdate.
func (mr *MockStoreMockRecorder) UserFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindForUpdate", reflect.TypeOf((*MockStore)(nil).UserFindForUpdate), arg0, arg1)
}

// UserList mocks base method.
func (m *MockStore) UserList(arg0 context.Context) ([]db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", arg0)
	ret0, _ := ret[0].([]db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockStoreMockRecorder) UserList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockStore)(nil).UserList), arg0)
}

// UserListInput mocks base method.
func (m *MockStore) UserListInput(arg0 context.Context, arg1 int32) ([]db.UserListInputRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListInput", arg0, arg1)
	ret0, _ := ret[0].([]db.UserListInputRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserListInput indicates an expected call of UserListInput.
func (mr *MockStoreMockRecorder) UserListInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListInput", reflect.TypeOf((*MockStore)(nil).UserListInput), arg0, arg1)
}

// UserNavigationBarFind mocks base method.
func (m *MockStore) UserNavigationBarFind(arg0 context.Context, arg1 db.UserNavigationBarFindParams) ([]db.UserNavigationBarFindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserNavigationBarFind", arg0, arg1)
	ret0, _ := ret[0].([]db.UserNavigationBarFindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserNavigationBarFind indicates an expected call of UserNavigationBarFind.
func (mr *MockStoreMockRecorder) UserNavigationBarFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserNavigationBarFind", reflect.TypeOf((*MockStore)(nil).UserNavigationBarFind), arg0, arg1)
}

// UserPermissionsMap mocks base method.
func (m *MockStore) UserPermissionsMap(arg0 context.Context, arg1 int32) ([]db.UserPermissionsMapRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPermissionsMap", arg0, arg1)
	ret0, _ := ret[0].([]db.UserPermissionsMapRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPermissionsMap indicates an expected call of UserPermissionsMap.
func (mr *MockStoreMockRecorder) UserPermissionsMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermissionsMap", reflect.TypeOf((*MockStore)(nil).UserPermissionsMap), arg0, arg1)
}

// UserResetPassword mocks base method.
func (m *MockStore) UserResetPassword(arg0 context.Context, arg1 db.UserResetPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserResetPassword indicates an expected call of UserResetPassword.
func (mr *MockStoreMockRecorder) UserResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserResetPassword", reflect.TypeOf((*MockStore)(nil).UserResetPassword), arg0, arg1)
}

// UserTypeListInput mocks base method.
func (m *MockStore) UserTypeListInput(arg0 context.Context) ([]db.UserTypeListInputRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTypeListInput", arg0)
	ret0, _ := ret[0].([]db.UserTypeListInputRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTypeListInput indicates an expected call of UserTypeListInput.
func (mr *MockStoreMockRecorder) UserTypeListInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTypeListInput", reflect.TypeOf((*MockStore)(nil).UserTypeListInput), arg0)
}
