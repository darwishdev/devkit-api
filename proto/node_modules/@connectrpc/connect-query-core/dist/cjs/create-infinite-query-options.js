"use strict";
// Copyright 2021-2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInfiniteQueryOptions = createInfiniteQueryOptions;
const query_core_1 = require("@tanstack/query-core");
const call_unary_method_js_1 = require("./call-unary-method.js");
const connect_query_key_js_1 = require("./connect-query-key.js");
const structural_sharing_js_1 = require("./structural-sharing.js");
const utils_js_1 = require("./utils.js");
// eslint-disable-next-line @typescript-eslint/max-params -- we have 4 required arguments
function createUnaryInfiniteQueryFn(transport, schema, input, { pageParamKey, }) {
    return async (context) => {
        (0, utils_js_1.assert)("pageParam" in context, "pageParam must be part of context");
        const inputCombinedWithPageParam = {
            ...input,
            [pageParamKey]: context.pageParam,
        };
        return (0, call_unary_method_js_1.callUnaryMethod)(transport, schema, inputCombinedWithPageParam, {
            signal: context.signal,
        });
    };
}
function createInfiniteQueryOptions(schema, input, { transport, getNextPageParam, pageParamKey, }) {
    const queryKey = (0, connect_query_key_js_1.createConnectQueryKey)({
        cardinality: "infinite",
        schema,
        transport,
        input,
    });
    const structuralSharing = (0, structural_sharing_js_1.createStructuralSharing)(schema.output);
    const queryFn = input === query_core_1.skipToken
        ? query_core_1.skipToken
        : createUnaryInfiniteQueryFn(transport, schema, input, {
            pageParamKey,
        });
    return {
        getNextPageParam,
        initialPageParam: input === query_core_1.skipToken
            ? undefined
            : input[pageParamKey],
        queryKey,
        queryFn,
        structuralSharing,
    };
}
//# sourceMappingURL=create-infinite-query-options.js.map