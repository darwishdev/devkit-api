import type { DescMessage, DescMethodUnary, MessageInitShape, MessageShape } from "@bufbuild/protobuf";
import type { Transport } from "@connectrpc/connect";
import type { QueryFunction, SkipToken } from "@tanstack/query-core";
import type { ConnectQueryKey } from "./connect-query-key.js";
/**
 * Creates all options required to make a query. Useful in combination with `useQueries` from tanstack/react-query.
 */
export declare function createQueryOptions<I extends DescMessage, O extends DescMessage>(schema: DescMethodUnary<I, O>, input: MessageInitShape<I> | undefined, { transport, }: {
    transport: Transport;
}): {
    queryKey: ConnectQueryKey;
    queryFn: QueryFunction<MessageShape<O>, ConnectQueryKey>;
    structuralSharing: (oldData: unknown, newData: unknown) => unknown;
};
export declare function createQueryOptions<I extends DescMessage, O extends DescMessage>(schema: DescMethodUnary<I, O>, input: SkipToken, { transport, }: {
    transport: Transport;
}): {
    queryKey: ConnectQueryKey;
    queryFn: SkipToken;
    structuralSharing: (oldData: unknown, newData: unknown) => unknown;
};
export declare function createQueryOptions<I extends DescMessage, O extends DescMessage>(schema: DescMethodUnary<I, O>, input: SkipToken | MessageInitShape<I> | undefined, { transport, }: {
    transport: Transport;
}): {
    queryKey: ConnectQueryKey;
    queryFn: QueryFunction<MessageShape<O>, ConnectQueryKey> | SkipToken;
    structuralSharing: (oldData: unknown, newData: unknown) => unknown;
};
//# sourceMappingURL=create-query-options.d.ts.map