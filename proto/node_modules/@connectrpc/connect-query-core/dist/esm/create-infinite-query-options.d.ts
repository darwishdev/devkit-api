import type { DescMessage, DescMethodUnary, MessageInitShape, MessageShape } from "@bufbuild/protobuf";
import type { Transport } from "@connectrpc/connect";
import type { GetNextPageParamFunction, QueryFunction, SkipToken } from "@tanstack/query-core";
import { type ConnectQueryKey } from "./connect-query-key.js";
/**
 * Options specific to connect-query
 */
export interface ConnectInfiniteQueryOptions<I extends DescMessage, O extends DescMessage, ParamKey extends keyof MessageInitShape<I>> {
    /** Defines which part of the input should be considered the page param */
    pageParamKey: ParamKey;
    /** Determines the next page. */
    getNextPageParam: GetNextPageParamFunction<MessageInitShape<I>[ParamKey], MessageShape<O>>;
}
/**
 * Query the method provided. Maps to useInfiniteQuery on tanstack/react-query
 */
export declare function createInfiniteQueryOptions<I extends DescMessage, O extends DescMessage, ParamKey extends keyof MessageInitShape<I>>(schema: DescMethodUnary<I, O>, input: MessageInitShape<I> & Required<Pick<MessageInitShape<I>, ParamKey>>, { transport, getNextPageParam, pageParamKey, }: ConnectInfiniteQueryOptions<I, O, ParamKey> & {
    transport: Transport;
}): {
    getNextPageParam: ConnectInfiniteQueryOptions<I, O, ParamKey>["getNextPageParam"];
    queryKey: ConnectQueryKey;
    queryFn: QueryFunction<MessageShape<O>, ConnectQueryKey, MessageInitShape<I>[ParamKey]>;
    structuralSharing: (oldData: unknown, newData: unknown) => unknown;
    initialPageParam: MessageInitShape<I>[ParamKey];
};
export declare function createInfiniteQueryOptions<I extends DescMessage, O extends DescMessage, ParamKey extends keyof MessageInitShape<I>>(schema: DescMethodUnary<I, O>, input: SkipToken, { transport, getNextPageParam, pageParamKey, }: ConnectInfiniteQueryOptions<I, O, ParamKey> & {
    transport: Transport;
}): {
    getNextPageParam: ConnectInfiniteQueryOptions<I, O, ParamKey>["getNextPageParam"];
    queryKey: ConnectQueryKey;
    queryFn: SkipToken;
    structuralSharing: (oldData: unknown, newData: unknown) => unknown;
    initialPageParam: MessageInitShape<I>[ParamKey];
};
export declare function createInfiniteQueryOptions<I extends DescMessage, O extends DescMessage, ParamKey extends keyof MessageInitShape<I>>(schema: DescMethodUnary<I, O>, input: SkipToken | (MessageInitShape<I> & Required<Pick<MessageInitShape<I>, ParamKey>>), { transport, getNextPageParam, pageParamKey, }: ConnectInfiniteQueryOptions<I, O, ParamKey> & {
    transport: Transport;
}): {
    getNextPageParam: ConnectInfiniteQueryOptions<I, O, ParamKey>["getNextPageParam"];
    queryKey: ConnectQueryKey;
    queryFn: QueryFunction<MessageShape<O>, ConnectQueryKey, MessageInitShape<I>[ParamKey]> | SkipToken;
    structuralSharing: (oldData: unknown, newData: unknown) => unknown;
    initialPageParam: MessageInitShape<I>[ParamKey];
};
//# sourceMappingURL=create-infinite-query-options.d.ts.map