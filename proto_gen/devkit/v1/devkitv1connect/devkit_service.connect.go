// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: devkit/v1/devkit_service.proto

package devkitv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/darwishdev/devkit-api/proto_gen/devkit/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DevkitServiceName is the fully-qualified name of the DevkitService service.
	DevkitServiceName = "devkit.v1.DevkitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DevkitServiceSettingsUpdateProcedure is the fully-qualified name of the DevkitService's
	// SettingsUpdate RPC.
	DevkitServiceSettingsUpdateProcedure = "/devkit.v1.DevkitService/SettingsUpdate"
	// DevkitServiceSettingsFindForUpdateProcedure is the fully-qualified name of the DevkitService's
	// SettingsFindForUpdate RPC.
	DevkitServiceSettingsFindForUpdateProcedure = "/devkit.v1.DevkitService/SettingsFindForUpdate"
	// DevkitServiceIconsListProcedure is the fully-qualified name of the DevkitService's IconsList RPC.
	DevkitServiceIconsListProcedure = "/devkit.v1.DevkitService/IconsList"
	// DevkitServiceIconsCreateUpdateBulkProcedure is the fully-qualified name of the DevkitService's
	// IconsCreateUpdateBulk RPC.
	DevkitServiceIconsCreateUpdateBulkProcedure = "/devkit.v1.DevkitService/IconsCreateUpdateBulk"
	// DevkitServiceBucketCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// BucketCreateUpdate RPC.
	DevkitServiceBucketCreateUpdateProcedure = "/devkit.v1.DevkitService/BucketCreateUpdate"
	// DevkitServiceFilesListProcedure is the fully-qualified name of the DevkitService's FilesList RPC.
	DevkitServiceFilesListProcedure = "/devkit.v1.DevkitService/FilesList"
	// DevkitServiceBucketsListProcedure is the fully-qualified name of the DevkitService's BucketsList
	// RPC.
	DevkitServiceBucketsListProcedure = "/devkit.v1.DevkitService/BucketsList"
	// DevkitServiceUploadFileProcedure is the fully-qualified name of the DevkitService's UploadFile
	// RPC.
	DevkitServiceUploadFileProcedure = "/devkit.v1.DevkitService/UploadFile"
	// DevkitServiceUploadFilesProcedure is the fully-qualified name of the DevkitService's UploadFiles
	// RPC.
	DevkitServiceUploadFilesProcedure = "/devkit.v1.DevkitService/UploadFiles"
	// DevkitServiceFilesDeleteProcedure is the fully-qualified name of the DevkitService's FilesDelete
	// RPC.
	DevkitServiceFilesDeleteProcedure = "/devkit.v1.DevkitService/FilesDelete"
	// DevkitServiceImportTableProcedure is the fully-qualified name of the DevkitService's ImportTable
	// RPC.
	DevkitServiceImportTableProcedure = "/devkit.v1.DevkitService/ImportTable"
	// DevkitServiceSendEmailProcedure is the fully-qualified name of the DevkitService's SendEmail RPC.
	DevkitServiceSendEmailProcedure = "/devkit.v1.DevkitService/SendEmail"
	// DevkitServiceTranslationsCreateUpdateBulkProcedure is the fully-qualified name of the
	// DevkitService's TranslationsCreateUpdateBulk RPC.
	DevkitServiceTranslationsCreateUpdateBulkProcedure = "/devkit.v1.DevkitService/TranslationsCreateUpdateBulk"
	// DevkitServiceTranslationsDeleteProcedure is the fully-qualified name of the DevkitService's
	// TranslationsDelete RPC.
	DevkitServiceTranslationsDeleteProcedure = "/devkit.v1.DevkitService/TranslationsDelete"
	// DevkitServiceTranslationsListProcedure is the fully-qualified name of the DevkitService's
	// TranslationsList RPC.
	DevkitServiceTranslationsListProcedure = "/devkit.v1.DevkitService/TranslationsList"
	// DevkitServiceRolesListProcedure is the fully-qualified name of the DevkitService's RolesList RPC.
	DevkitServiceRolesListProcedure = "/devkit.v1.DevkitService/RolesList"
	// DevkitServiceRoleCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// RoleCreateUpdate RPC.
	DevkitServiceRoleCreateUpdateProcedure = "/devkit.v1.DevkitService/RoleCreateUpdate"
	// DevkitServiceRolesDeleteRestoreProcedure is the fully-qualified name of the DevkitService's
	// RolesDeleteRestore RPC.
	DevkitServiceRolesDeleteRestoreProcedure = "/devkit.v1.DevkitService/RolesDeleteRestore"
	// DevkitServiceUsersListProcedure is the fully-qualified name of the DevkitService's UsersList RPC.
	DevkitServiceUsersListProcedure = "/devkit.v1.DevkitService/UsersList"
	// DevkitServiceUserCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// UserCreateUpdate RPC.
	DevkitServiceUserCreateUpdateProcedure = "/devkit.v1.DevkitService/UserCreateUpdate"
	// DevkitServiceUserDeleteProcedure is the fully-qualified name of the DevkitService's UserDelete
	// RPC.
	DevkitServiceUserDeleteProcedure = "/devkit.v1.DevkitService/UserDelete"
	// DevkitServiceUsersDeleteRestoreProcedure is the fully-qualified name of the DevkitService's
	// UsersDeleteRestore RPC.
	DevkitServiceUsersDeleteRestoreProcedure = "/devkit.v1.DevkitService/UsersDeleteRestore"
	// DevkitServiceUserLoginProviderCallbackProcedure is the fully-qualified name of the
	// DevkitService's UserLoginProviderCallback RPC.
	DevkitServiceUserLoginProviderCallbackProcedure = "/devkit.v1.DevkitService/UserLoginProviderCallback"
	// DevkitServiceUserResetPasswordProcedure is the fully-qualified name of the DevkitService's
	// UserResetPassword RPC.
	DevkitServiceUserResetPasswordProcedure = "/devkit.v1.DevkitService/UserResetPassword"
	// DevkitServiceUserResetPasswordEmailProcedure is the fully-qualified name of the DevkitService's
	// UserResetPasswordEmail RPC.
	DevkitServiceUserResetPasswordEmailProcedure = "/devkit.v1.DevkitService/UserResetPasswordEmail"
	// DevkitServiceUserLoginProviderProcedure is the fully-qualified name of the DevkitService's
	// UserLoginProvider RPC.
	DevkitServiceUserLoginProviderProcedure = "/devkit.v1.DevkitService/UserLoginProvider"
	// DevkitServiceUserInviteProcedure is the fully-qualified name of the DevkitService's UserInvite
	// RPC.
	DevkitServiceUserInviteProcedure = "/devkit.v1.DevkitService/UserInvite"
	// DevkitServiceUserAuthorizeProcedure is the fully-qualified name of the DevkitService's
	// UserAuthorize RPC.
	DevkitServiceUserAuthorizeProcedure = "/devkit.v1.DevkitService/UserAuthorize"
	// DevkitServiceUserLoginProcedure is the fully-qualified name of the DevkitService's UserLogin RPC.
	DevkitServiceUserLoginProcedure = "/devkit.v1.DevkitService/UserLogin"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	devkitServiceServiceDescriptor                            = v1.File_devkit_v1_devkit_service_proto.Services().ByName("DevkitService")
	devkitServiceSettingsUpdateMethodDescriptor               = devkitServiceServiceDescriptor.Methods().ByName("SettingsUpdate")
	devkitServiceSettingsFindForUpdateMethodDescriptor        = devkitServiceServiceDescriptor.Methods().ByName("SettingsFindForUpdate")
	devkitServiceIconsListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("IconsList")
	devkitServiceIconsCreateUpdateBulkMethodDescriptor        = devkitServiceServiceDescriptor.Methods().ByName("IconsCreateUpdateBulk")
	devkitServiceBucketCreateUpdateMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("BucketCreateUpdate")
	devkitServiceFilesListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("FilesList")
	devkitServiceBucketsListMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("BucketsList")
	devkitServiceUploadFileMethodDescriptor                   = devkitServiceServiceDescriptor.Methods().ByName("UploadFile")
	devkitServiceUploadFilesMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("UploadFiles")
	devkitServiceFilesDeleteMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("FilesDelete")
	devkitServiceImportTableMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("ImportTable")
	devkitServiceSendEmailMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("SendEmail")
	devkitServiceTranslationsCreateUpdateBulkMethodDescriptor = devkitServiceServiceDescriptor.Methods().ByName("TranslationsCreateUpdateBulk")
	devkitServiceTranslationsDeleteMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("TranslationsDelete")
	devkitServiceTranslationsListMethodDescriptor             = devkitServiceServiceDescriptor.Methods().ByName("TranslationsList")
	devkitServiceRolesListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("RolesList")
	devkitServiceRoleCreateUpdateMethodDescriptor             = devkitServiceServiceDescriptor.Methods().ByName("RoleCreateUpdate")
	devkitServiceRolesDeleteRestoreMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("RolesDeleteRestore")
	devkitServiceUsersListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("UsersList")
	devkitServiceUserCreateUpdateMethodDescriptor             = devkitServiceServiceDescriptor.Methods().ByName("UserCreateUpdate")
	devkitServiceUserDeleteMethodDescriptor                   = devkitServiceServiceDescriptor.Methods().ByName("UserDelete")
	devkitServiceUsersDeleteRestoreMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("UsersDeleteRestore")
	devkitServiceUserLoginProviderCallbackMethodDescriptor    = devkitServiceServiceDescriptor.Methods().ByName("UserLoginProviderCallback")
	devkitServiceUserResetPasswordMethodDescriptor            = devkitServiceServiceDescriptor.Methods().ByName("UserResetPassword")
	devkitServiceUserResetPasswordEmailMethodDescriptor       = devkitServiceServiceDescriptor.Methods().ByName("UserResetPasswordEmail")
	devkitServiceUserLoginProviderMethodDescriptor            = devkitServiceServiceDescriptor.Methods().ByName("UserLoginProvider")
	devkitServiceUserInviteMethodDescriptor                   = devkitServiceServiceDescriptor.Methods().ByName("UserInvite")
	devkitServiceUserAuthorizeMethodDescriptor                = devkitServiceServiceDescriptor.Methods().ByName("UserAuthorize")
	devkitServiceUserLoginMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("UserLogin")
)

// DevkitServiceClient is a client for the devkit.v1.DevkitService service.
type DevkitServiceClient interface {
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// public
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// settings
	SettingsUpdate(context.Context, *connect.Request[v1.SettingsUpdateRequest]) (*connect.Response[v1.SettingsUpdateResponse], error)
	SettingsFindForUpdate(context.Context, *connect.Request[v1.SettingsFindForUpdateRequest]) (*connect.Response[v1.SettingsFindForUpdateResponse], error)
	// icons
	IconsList(context.Context, *connect.Request[v1.IconsListRequest]) (*connect.Response[v1.IconsListResponse], error)
	IconsCreateUpdateBulk(context.Context, *connect.Request[v1.IconsCreateUpdateBulkRequest]) (*connect.Response[v1.IconsCreateUpdateBulkResponse], error)
	BucketCreateUpdate(context.Context, *connect.Request[v1.BucketCreateUpdateRequest]) (*connect.Response[v1.BucketCreateUpdateResponse], error)
	FilesList(context.Context, *connect.Request[v1.FilesListRequest]) (*connect.Response[v1.FilesListResponse], error)
	BucketsList(context.Context, *connect.Request[v1.BucketsListRequest]) (*connect.Response[v1.BucketsListResponse], error)
	UploadFile(context.Context, *connect.Request[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error)
	UploadFiles(context.Context, *connect.Request[v1.UploadFilesRequest]) (*connect.Response[v1.UploadFilesResponse], error)
	FilesDelete(context.Context, *connect.Request[v1.FilesDeleteRequest]) (*connect.Response[v1.FilesDeleteResponse], error)
	ImportTable(context.Context, *connect.Request[v1.ImportTableRequest]) (*connect.Response[v1.ImportTableResponse], error)
	// emails
	SendEmail(context.Context, *connect.Request[v1.SendEmailRequest]) (*connect.Response[v1.SendEmailResponse], error)
	// translations
	TranslationsCreateUpdateBulk(context.Context, *connect.Request[v1.TranslationsCreateUpdateBulkRequest]) (*connect.Response[v1.TranslationsCreateUpdateBulkResponse], error)
	TranslationsDelete(context.Context, *connect.Request[v1.TranslationsDeleteRequest]) (*connect.Response[v1.TranslationsDeleteResponse], error)
	TranslationsList(context.Context, *connect.Request[v1.TranslationsListRequest]) (*connect.Response[v1.TranslationsListResponse], error)
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// accounts
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// roles
	// *******************************************************************************************//
	RolesList(context.Context, *connect.Request[v1.RolesListRequest]) (*connect.Response[v1.RolesListResponse], error)
	RoleCreateUpdate(context.Context, *connect.Request[v1.RoleCreateUpdateRequest]) (*connect.Response[v1.RoleCreateUpdateResponse], error)
	RolesDeleteRestore(context.Context, *connect.Request[v1.RolesDeleteRestoreRequest]) (*connect.Response[v1.RolesDeleteRestoreResponse], error)
	// *******************************************************************************************//
	// users
	// *******************************************************************************************//
	UsersList(context.Context, *connect.Request[v1.UsersListRequest]) (*connect.Response[v1.UsersListResponse], error)
	UserCreateUpdate(context.Context, *connect.Request[v1.UserCreateUpdateRequest]) (*connect.Response[v1.UserCreateUpdateResponse], error)
	UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error)
	UsersDeleteRestore(context.Context, *connect.Request[v1.UsersDeleteRestoreRequest]) (*connect.Response[v1.UsersDeleteRestoreResponse], error)
	// *******************************************************************************************//
	// auth
	// *******************************************************************************************//
	UserLoginProviderCallback(context.Context, *connect.Request[v1.UserLoginProviderCallbackRequest]) (*connect.Response[v1.UserLoginProviderCallbackResponse], error)
	UserResetPassword(context.Context, *connect.Request[v1.UserResetPasswordRequest]) (*connect.Response[v1.UserResetPasswordResponse], error)
	UserResetPasswordEmail(context.Context, *connect.Request[v1.UserResetPasswordEmailRequest]) (*connect.Response[v1.UserResetPasswordEmailResponse], error)
	UserLoginProvider(context.Context, *connect.Request[v1.UserLoginProviderRequest]) (*connect.Response[v1.UserLoginProviderResponse], error)
	UserInvite(context.Context, *connect.Request[v1.UserInviteRequest]) (*connect.Response[v1.UserInviteResponse], error)
	UserAuthorize(context.Context, *connect.Request[v1.UserAuthorizeRequest]) (*connect.Response[v1.UserAuthorizeResponse], error)
	UserLogin(context.Context, *connect.Request[v1.UserLoginRequest]) (*connect.Response[v1.UserLoginResponse], error)
}

// NewDevkitServiceClient constructs a client for the devkit.v1.DevkitService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDevkitServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DevkitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &devkitServiceClient{
		settingsUpdate: connect.NewClient[v1.SettingsUpdateRequest, v1.SettingsUpdateResponse](
			httpClient,
			baseURL+DevkitServiceSettingsUpdateProcedure,
			connect.WithSchema(devkitServiceSettingsUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		settingsFindForUpdate: connect.NewClient[v1.SettingsFindForUpdateRequest, v1.SettingsFindForUpdateResponse](
			httpClient,
			baseURL+DevkitServiceSettingsFindForUpdateProcedure,
			connect.WithSchema(devkitServiceSettingsFindForUpdateMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		iconsList: connect.NewClient[v1.IconsListRequest, v1.IconsListResponse](
			httpClient,
			baseURL+DevkitServiceIconsListProcedure,
			connect.WithSchema(devkitServiceIconsListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		iconsCreateUpdateBulk: connect.NewClient[v1.IconsCreateUpdateBulkRequest, v1.IconsCreateUpdateBulkResponse](
			httpClient,
			baseURL+DevkitServiceIconsCreateUpdateBulkProcedure,
			connect.WithSchema(devkitServiceIconsCreateUpdateBulkMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		bucketCreateUpdate: connect.NewClient[v1.BucketCreateUpdateRequest, v1.BucketCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServiceBucketCreateUpdateProcedure,
			connect.WithSchema(devkitServiceBucketCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		filesList: connect.NewClient[v1.FilesListRequest, v1.FilesListResponse](
			httpClient,
			baseURL+DevkitServiceFilesListProcedure,
			connect.WithSchema(devkitServiceFilesListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		bucketsList: connect.NewClient[v1.BucketsListRequest, v1.BucketsListResponse](
			httpClient,
			baseURL+DevkitServiceBucketsListProcedure,
			connect.WithSchema(devkitServiceBucketsListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		uploadFile: connect.NewClient[v1.UploadFileRequest, v1.UploadFileResponse](
			httpClient,
			baseURL+DevkitServiceUploadFileProcedure,
			connect.WithSchema(devkitServiceUploadFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadFiles: connect.NewClient[v1.UploadFilesRequest, v1.UploadFilesResponse](
			httpClient,
			baseURL+DevkitServiceUploadFilesProcedure,
			connect.WithSchema(devkitServiceUploadFilesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		filesDelete: connect.NewClient[v1.FilesDeleteRequest, v1.FilesDeleteResponse](
			httpClient,
			baseURL+DevkitServiceFilesDeleteProcedure,
			connect.WithSchema(devkitServiceFilesDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		importTable: connect.NewClient[v1.ImportTableRequest, v1.ImportTableResponse](
			httpClient,
			baseURL+DevkitServiceImportTableProcedure,
			connect.WithSchema(devkitServiceImportTableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendEmail: connect.NewClient[v1.SendEmailRequest, v1.SendEmailResponse](
			httpClient,
			baseURL+DevkitServiceSendEmailProcedure,
			connect.WithSchema(devkitServiceSendEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		translationsCreateUpdateBulk: connect.NewClient[v1.TranslationsCreateUpdateBulkRequest, v1.TranslationsCreateUpdateBulkResponse](
			httpClient,
			baseURL+DevkitServiceTranslationsCreateUpdateBulkProcedure,
			connect.WithSchema(devkitServiceTranslationsCreateUpdateBulkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		translationsDelete: connect.NewClient[v1.TranslationsDeleteRequest, v1.TranslationsDeleteResponse](
			httpClient,
			baseURL+DevkitServiceTranslationsDeleteProcedure,
			connect.WithSchema(devkitServiceTranslationsDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		translationsList: connect.NewClient[v1.TranslationsListRequest, v1.TranslationsListResponse](
			httpClient,
			baseURL+DevkitServiceTranslationsListProcedure,
			connect.WithSchema(devkitServiceTranslationsListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		rolesList: connect.NewClient[v1.RolesListRequest, v1.RolesListResponse](
			httpClient,
			baseURL+DevkitServiceRolesListProcedure,
			connect.WithSchema(devkitServiceRolesListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		roleCreateUpdate: connect.NewClient[v1.RoleCreateUpdateRequest, v1.RoleCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServiceRoleCreateUpdateProcedure,
			connect.WithSchema(devkitServiceRoleCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rolesDeleteRestore: connect.NewClient[v1.RolesDeleteRestoreRequest, v1.RolesDeleteRestoreResponse](
			httpClient,
			baseURL+DevkitServiceRolesDeleteRestoreProcedure,
			connect.WithSchema(devkitServiceRolesDeleteRestoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		usersList: connect.NewClient[v1.UsersListRequest, v1.UsersListResponse](
			httpClient,
			baseURL+DevkitServiceUsersListProcedure,
			connect.WithSchema(devkitServiceUsersListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		userCreateUpdate: connect.NewClient[v1.UserCreateUpdateRequest, v1.UserCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServiceUserCreateUpdateProcedure,
			connect.WithSchema(devkitServiceUserCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userDelete: connect.NewClient[v1.UserDeleteRequest, v1.UserDeleteResponse](
			httpClient,
			baseURL+DevkitServiceUserDeleteProcedure,
			connect.WithSchema(devkitServiceUserDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		usersDeleteRestore: connect.NewClient[v1.UsersDeleteRestoreRequest, v1.UsersDeleteRestoreResponse](
			httpClient,
			baseURL+DevkitServiceUsersDeleteRestoreProcedure,
			connect.WithSchema(devkitServiceUsersDeleteRestoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userLoginProviderCallback: connect.NewClient[v1.UserLoginProviderCallbackRequest, v1.UserLoginProviderCallbackResponse](
			httpClient,
			baseURL+DevkitServiceUserLoginProviderCallbackProcedure,
			connect.WithSchema(devkitServiceUserLoginProviderCallbackMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		userResetPassword: connect.NewClient[v1.UserResetPasswordRequest, v1.UserResetPasswordResponse](
			httpClient,
			baseURL+DevkitServiceUserResetPasswordProcedure,
			connect.WithSchema(devkitServiceUserResetPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userResetPasswordEmail: connect.NewClient[v1.UserResetPasswordEmailRequest, v1.UserResetPasswordEmailResponse](
			httpClient,
			baseURL+DevkitServiceUserResetPasswordEmailProcedure,
			connect.WithSchema(devkitServiceUserResetPasswordEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userLoginProvider: connect.NewClient[v1.UserLoginProviderRequest, v1.UserLoginProviderResponse](
			httpClient,
			baseURL+DevkitServiceUserLoginProviderProcedure,
			connect.WithSchema(devkitServiceUserLoginProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userInvite: connect.NewClient[v1.UserInviteRequest, v1.UserInviteResponse](
			httpClient,
			baseURL+DevkitServiceUserInviteProcedure,
			connect.WithSchema(devkitServiceUserInviteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userAuthorize: connect.NewClient[v1.UserAuthorizeRequest, v1.UserAuthorizeResponse](
			httpClient,
			baseURL+DevkitServiceUserAuthorizeProcedure,
			connect.WithSchema(devkitServiceUserAuthorizeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userLogin: connect.NewClient[v1.UserLoginRequest, v1.UserLoginResponse](
			httpClient,
			baseURL+DevkitServiceUserLoginProcedure,
			connect.WithSchema(devkitServiceUserLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// devkitServiceClient implements DevkitServiceClient.
type devkitServiceClient struct {
	settingsUpdate               *connect.Client[v1.SettingsUpdateRequest, v1.SettingsUpdateResponse]
	settingsFindForUpdate        *connect.Client[v1.SettingsFindForUpdateRequest, v1.SettingsFindForUpdateResponse]
	iconsList                    *connect.Client[v1.IconsListRequest, v1.IconsListResponse]
	iconsCreateUpdateBulk        *connect.Client[v1.IconsCreateUpdateBulkRequest, v1.IconsCreateUpdateBulkResponse]
	bucketCreateUpdate           *connect.Client[v1.BucketCreateUpdateRequest, v1.BucketCreateUpdateResponse]
	filesList                    *connect.Client[v1.FilesListRequest, v1.FilesListResponse]
	bucketsList                  *connect.Client[v1.BucketsListRequest, v1.BucketsListResponse]
	uploadFile                   *connect.Client[v1.UploadFileRequest, v1.UploadFileResponse]
	uploadFiles                  *connect.Client[v1.UploadFilesRequest, v1.UploadFilesResponse]
	filesDelete                  *connect.Client[v1.FilesDeleteRequest, v1.FilesDeleteResponse]
	importTable                  *connect.Client[v1.ImportTableRequest, v1.ImportTableResponse]
	sendEmail                    *connect.Client[v1.SendEmailRequest, v1.SendEmailResponse]
	translationsCreateUpdateBulk *connect.Client[v1.TranslationsCreateUpdateBulkRequest, v1.TranslationsCreateUpdateBulkResponse]
	translationsDelete           *connect.Client[v1.TranslationsDeleteRequest, v1.TranslationsDeleteResponse]
	translationsList             *connect.Client[v1.TranslationsListRequest, v1.TranslationsListResponse]
	rolesList                    *connect.Client[v1.RolesListRequest, v1.RolesListResponse]
	roleCreateUpdate             *connect.Client[v1.RoleCreateUpdateRequest, v1.RoleCreateUpdateResponse]
	rolesDeleteRestore           *connect.Client[v1.RolesDeleteRestoreRequest, v1.RolesDeleteRestoreResponse]
	usersList                    *connect.Client[v1.UsersListRequest, v1.UsersListResponse]
	userCreateUpdate             *connect.Client[v1.UserCreateUpdateRequest, v1.UserCreateUpdateResponse]
	userDelete                   *connect.Client[v1.UserDeleteRequest, v1.UserDeleteResponse]
	usersDeleteRestore           *connect.Client[v1.UsersDeleteRestoreRequest, v1.UsersDeleteRestoreResponse]
	userLoginProviderCallback    *connect.Client[v1.UserLoginProviderCallbackRequest, v1.UserLoginProviderCallbackResponse]
	userResetPassword            *connect.Client[v1.UserResetPasswordRequest, v1.UserResetPasswordResponse]
	userResetPasswordEmail       *connect.Client[v1.UserResetPasswordEmailRequest, v1.UserResetPasswordEmailResponse]
	userLoginProvider            *connect.Client[v1.UserLoginProviderRequest, v1.UserLoginProviderResponse]
	userInvite                   *connect.Client[v1.UserInviteRequest, v1.UserInviteResponse]
	userAuthorize                *connect.Client[v1.UserAuthorizeRequest, v1.UserAuthorizeResponse]
	userLogin                    *connect.Client[v1.UserLoginRequest, v1.UserLoginResponse]
}

// SettingsUpdate calls devkit.v1.DevkitService.SettingsUpdate.
func (c *devkitServiceClient) SettingsUpdate(ctx context.Context, req *connect.Request[v1.SettingsUpdateRequest]) (*connect.Response[v1.SettingsUpdateResponse], error) {
	return c.settingsUpdate.CallUnary(ctx, req)
}

// SettingsFindForUpdate calls devkit.v1.DevkitService.SettingsFindForUpdate.
func (c *devkitServiceClient) SettingsFindForUpdate(ctx context.Context, req *connect.Request[v1.SettingsFindForUpdateRequest]) (*connect.Response[v1.SettingsFindForUpdateResponse], error) {
	return c.settingsFindForUpdate.CallUnary(ctx, req)
}

// IconsList calls devkit.v1.DevkitService.IconsList.
func (c *devkitServiceClient) IconsList(ctx context.Context, req *connect.Request[v1.IconsListRequest]) (*connect.Response[v1.IconsListResponse], error) {
	return c.iconsList.CallUnary(ctx, req)
}

// IconsCreateUpdateBulk calls devkit.v1.DevkitService.IconsCreateUpdateBulk.
func (c *devkitServiceClient) IconsCreateUpdateBulk(ctx context.Context, req *connect.Request[v1.IconsCreateUpdateBulkRequest]) (*connect.Response[v1.IconsCreateUpdateBulkResponse], error) {
	return c.iconsCreateUpdateBulk.CallUnary(ctx, req)
}

// BucketCreateUpdate calls devkit.v1.DevkitService.BucketCreateUpdate.
func (c *devkitServiceClient) BucketCreateUpdate(ctx context.Context, req *connect.Request[v1.BucketCreateUpdateRequest]) (*connect.Response[v1.BucketCreateUpdateResponse], error) {
	return c.bucketCreateUpdate.CallUnary(ctx, req)
}

// FilesList calls devkit.v1.DevkitService.FilesList.
func (c *devkitServiceClient) FilesList(ctx context.Context, req *connect.Request[v1.FilesListRequest]) (*connect.Response[v1.FilesListResponse], error) {
	return c.filesList.CallUnary(ctx, req)
}

// BucketsList calls devkit.v1.DevkitService.BucketsList.
func (c *devkitServiceClient) BucketsList(ctx context.Context, req *connect.Request[v1.BucketsListRequest]) (*connect.Response[v1.BucketsListResponse], error) {
	return c.bucketsList.CallUnary(ctx, req)
}

// UploadFile calls devkit.v1.DevkitService.UploadFile.
func (c *devkitServiceClient) UploadFile(ctx context.Context, req *connect.Request[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error) {
	return c.uploadFile.CallUnary(ctx, req)
}

// UploadFiles calls devkit.v1.DevkitService.UploadFiles.
func (c *devkitServiceClient) UploadFiles(ctx context.Context, req *connect.Request[v1.UploadFilesRequest]) (*connect.Response[v1.UploadFilesResponse], error) {
	return c.uploadFiles.CallUnary(ctx, req)
}

// FilesDelete calls devkit.v1.DevkitService.FilesDelete.
func (c *devkitServiceClient) FilesDelete(ctx context.Context, req *connect.Request[v1.FilesDeleteRequest]) (*connect.Response[v1.FilesDeleteResponse], error) {
	return c.filesDelete.CallUnary(ctx, req)
}

// ImportTable calls devkit.v1.DevkitService.ImportTable.
func (c *devkitServiceClient) ImportTable(ctx context.Context, req *connect.Request[v1.ImportTableRequest]) (*connect.Response[v1.ImportTableResponse], error) {
	return c.importTable.CallUnary(ctx, req)
}

// SendEmail calls devkit.v1.DevkitService.SendEmail.
func (c *devkitServiceClient) SendEmail(ctx context.Context, req *connect.Request[v1.SendEmailRequest]) (*connect.Response[v1.SendEmailResponse], error) {
	return c.sendEmail.CallUnary(ctx, req)
}

// TranslationsCreateUpdateBulk calls devkit.v1.DevkitService.TranslationsCreateUpdateBulk.
func (c *devkitServiceClient) TranslationsCreateUpdateBulk(ctx context.Context, req *connect.Request[v1.TranslationsCreateUpdateBulkRequest]) (*connect.Response[v1.TranslationsCreateUpdateBulkResponse], error) {
	return c.translationsCreateUpdateBulk.CallUnary(ctx, req)
}

// TranslationsDelete calls devkit.v1.DevkitService.TranslationsDelete.
func (c *devkitServiceClient) TranslationsDelete(ctx context.Context, req *connect.Request[v1.TranslationsDeleteRequest]) (*connect.Response[v1.TranslationsDeleteResponse], error) {
	return c.translationsDelete.CallUnary(ctx, req)
}

// TranslationsList calls devkit.v1.DevkitService.TranslationsList.
func (c *devkitServiceClient) TranslationsList(ctx context.Context, req *connect.Request[v1.TranslationsListRequest]) (*connect.Response[v1.TranslationsListResponse], error) {
	return c.translationsList.CallUnary(ctx, req)
}

// RolesList calls devkit.v1.DevkitService.RolesList.
func (c *devkitServiceClient) RolesList(ctx context.Context, req *connect.Request[v1.RolesListRequest]) (*connect.Response[v1.RolesListResponse], error) {
	return c.rolesList.CallUnary(ctx, req)
}

// RoleCreateUpdate calls devkit.v1.DevkitService.RoleCreateUpdate.
func (c *devkitServiceClient) RoleCreateUpdate(ctx context.Context, req *connect.Request[v1.RoleCreateUpdateRequest]) (*connect.Response[v1.RoleCreateUpdateResponse], error) {
	return c.roleCreateUpdate.CallUnary(ctx, req)
}

// RolesDeleteRestore calls devkit.v1.DevkitService.RolesDeleteRestore.
func (c *devkitServiceClient) RolesDeleteRestore(ctx context.Context, req *connect.Request[v1.RolesDeleteRestoreRequest]) (*connect.Response[v1.RolesDeleteRestoreResponse], error) {
	return c.rolesDeleteRestore.CallUnary(ctx, req)
}

// UsersList calls devkit.v1.DevkitService.UsersList.
func (c *devkitServiceClient) UsersList(ctx context.Context, req *connect.Request[v1.UsersListRequest]) (*connect.Response[v1.UsersListResponse], error) {
	return c.usersList.CallUnary(ctx, req)
}

// UserCreateUpdate calls devkit.v1.DevkitService.UserCreateUpdate.
func (c *devkitServiceClient) UserCreateUpdate(ctx context.Context, req *connect.Request[v1.UserCreateUpdateRequest]) (*connect.Response[v1.UserCreateUpdateResponse], error) {
	return c.userCreateUpdate.CallUnary(ctx, req)
}

// UserDelete calls devkit.v1.DevkitService.UserDelete.
func (c *devkitServiceClient) UserDelete(ctx context.Context, req *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error) {
	return c.userDelete.CallUnary(ctx, req)
}

// UsersDeleteRestore calls devkit.v1.DevkitService.UsersDeleteRestore.
func (c *devkitServiceClient) UsersDeleteRestore(ctx context.Context, req *connect.Request[v1.UsersDeleteRestoreRequest]) (*connect.Response[v1.UsersDeleteRestoreResponse], error) {
	return c.usersDeleteRestore.CallUnary(ctx, req)
}

// UserLoginProviderCallback calls devkit.v1.DevkitService.UserLoginProviderCallback.
func (c *devkitServiceClient) UserLoginProviderCallback(ctx context.Context, req *connect.Request[v1.UserLoginProviderCallbackRequest]) (*connect.Response[v1.UserLoginProviderCallbackResponse], error) {
	return c.userLoginProviderCallback.CallUnary(ctx, req)
}

// UserResetPassword calls devkit.v1.DevkitService.UserResetPassword.
func (c *devkitServiceClient) UserResetPassword(ctx context.Context, req *connect.Request[v1.UserResetPasswordRequest]) (*connect.Response[v1.UserResetPasswordResponse], error) {
	return c.userResetPassword.CallUnary(ctx, req)
}

// UserResetPasswordEmail calls devkit.v1.DevkitService.UserResetPasswordEmail.
func (c *devkitServiceClient) UserResetPasswordEmail(ctx context.Context, req *connect.Request[v1.UserResetPasswordEmailRequest]) (*connect.Response[v1.UserResetPasswordEmailResponse], error) {
	return c.userResetPasswordEmail.CallUnary(ctx, req)
}

// UserLoginProvider calls devkit.v1.DevkitService.UserLoginProvider.
func (c *devkitServiceClient) UserLoginProvider(ctx context.Context, req *connect.Request[v1.UserLoginProviderRequest]) (*connect.Response[v1.UserLoginProviderResponse], error) {
	return c.userLoginProvider.CallUnary(ctx, req)
}

// UserInvite calls devkit.v1.DevkitService.UserInvite.
func (c *devkitServiceClient) UserInvite(ctx context.Context, req *connect.Request[v1.UserInviteRequest]) (*connect.Response[v1.UserInviteResponse], error) {
	return c.userInvite.CallUnary(ctx, req)
}

// UserAuthorize calls devkit.v1.DevkitService.UserAuthorize.
func (c *devkitServiceClient) UserAuthorize(ctx context.Context, req *connect.Request[v1.UserAuthorizeRequest]) (*connect.Response[v1.UserAuthorizeResponse], error) {
	return c.userAuthorize.CallUnary(ctx, req)
}

// UserLogin calls devkit.v1.DevkitService.UserLogin.
func (c *devkitServiceClient) UserLogin(ctx context.Context, req *connect.Request[v1.UserLoginRequest]) (*connect.Response[v1.UserLoginResponse], error) {
	return c.userLogin.CallUnary(ctx, req)
}

// DevkitServiceHandler is an implementation of the devkit.v1.DevkitService service.
type DevkitServiceHandler interface {
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// public
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// settings
	SettingsUpdate(context.Context, *connect.Request[v1.SettingsUpdateRequest]) (*connect.Response[v1.SettingsUpdateResponse], error)
	SettingsFindForUpdate(context.Context, *connect.Request[v1.SettingsFindForUpdateRequest]) (*connect.Response[v1.SettingsFindForUpdateResponse], error)
	// icons
	IconsList(context.Context, *connect.Request[v1.IconsListRequest]) (*connect.Response[v1.IconsListResponse], error)
	IconsCreateUpdateBulk(context.Context, *connect.Request[v1.IconsCreateUpdateBulkRequest]) (*connect.Response[v1.IconsCreateUpdateBulkResponse], error)
	BucketCreateUpdate(context.Context, *connect.Request[v1.BucketCreateUpdateRequest]) (*connect.Response[v1.BucketCreateUpdateResponse], error)
	FilesList(context.Context, *connect.Request[v1.FilesListRequest]) (*connect.Response[v1.FilesListResponse], error)
	BucketsList(context.Context, *connect.Request[v1.BucketsListRequest]) (*connect.Response[v1.BucketsListResponse], error)
	UploadFile(context.Context, *connect.Request[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error)
	UploadFiles(context.Context, *connect.Request[v1.UploadFilesRequest]) (*connect.Response[v1.UploadFilesResponse], error)
	FilesDelete(context.Context, *connect.Request[v1.FilesDeleteRequest]) (*connect.Response[v1.FilesDeleteResponse], error)
	ImportTable(context.Context, *connect.Request[v1.ImportTableRequest]) (*connect.Response[v1.ImportTableResponse], error)
	// emails
	SendEmail(context.Context, *connect.Request[v1.SendEmailRequest]) (*connect.Response[v1.SendEmailResponse], error)
	// translations
	TranslationsCreateUpdateBulk(context.Context, *connect.Request[v1.TranslationsCreateUpdateBulkRequest]) (*connect.Response[v1.TranslationsCreateUpdateBulkResponse], error)
	TranslationsDelete(context.Context, *connect.Request[v1.TranslationsDeleteRequest]) (*connect.Response[v1.TranslationsDeleteResponse], error)
	TranslationsList(context.Context, *connect.Request[v1.TranslationsListRequest]) (*connect.Response[v1.TranslationsListResponse], error)
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// accounts
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// roles
	// *******************************************************************************************//
	RolesList(context.Context, *connect.Request[v1.RolesListRequest]) (*connect.Response[v1.RolesListResponse], error)
	RoleCreateUpdate(context.Context, *connect.Request[v1.RoleCreateUpdateRequest]) (*connect.Response[v1.RoleCreateUpdateResponse], error)
	RolesDeleteRestore(context.Context, *connect.Request[v1.RolesDeleteRestoreRequest]) (*connect.Response[v1.RolesDeleteRestoreResponse], error)
	// *******************************************************************************************//
	// users
	// *******************************************************************************************//
	UsersList(context.Context, *connect.Request[v1.UsersListRequest]) (*connect.Response[v1.UsersListResponse], error)
	UserCreateUpdate(context.Context, *connect.Request[v1.UserCreateUpdateRequest]) (*connect.Response[v1.UserCreateUpdateResponse], error)
	UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error)
	UsersDeleteRestore(context.Context, *connect.Request[v1.UsersDeleteRestoreRequest]) (*connect.Response[v1.UsersDeleteRestoreResponse], error)
	// *******************************************************************************************//
	// auth
	// *******************************************************************************************//
	UserLoginProviderCallback(context.Context, *connect.Request[v1.UserLoginProviderCallbackRequest]) (*connect.Response[v1.UserLoginProviderCallbackResponse], error)
	UserResetPassword(context.Context, *connect.Request[v1.UserResetPasswordRequest]) (*connect.Response[v1.UserResetPasswordResponse], error)
	UserResetPasswordEmail(context.Context, *connect.Request[v1.UserResetPasswordEmailRequest]) (*connect.Response[v1.UserResetPasswordEmailResponse], error)
	UserLoginProvider(context.Context, *connect.Request[v1.UserLoginProviderRequest]) (*connect.Response[v1.UserLoginProviderResponse], error)
	UserInvite(context.Context, *connect.Request[v1.UserInviteRequest]) (*connect.Response[v1.UserInviteResponse], error)
	UserAuthorize(context.Context, *connect.Request[v1.UserAuthorizeRequest]) (*connect.Response[v1.UserAuthorizeResponse], error)
	UserLogin(context.Context, *connect.Request[v1.UserLoginRequest]) (*connect.Response[v1.UserLoginResponse], error)
}

// NewDevkitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDevkitServiceHandler(svc DevkitServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	devkitServiceSettingsUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceSettingsUpdateProcedure,
		svc.SettingsUpdate,
		connect.WithSchema(devkitServiceSettingsUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceSettingsFindForUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceSettingsFindForUpdateProcedure,
		svc.SettingsFindForUpdate,
		connect.WithSchema(devkitServiceSettingsFindForUpdateMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceIconsListHandler := connect.NewUnaryHandler(
		DevkitServiceIconsListProcedure,
		svc.IconsList,
		connect.WithSchema(devkitServiceIconsListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceIconsCreateUpdateBulkHandler := connect.NewUnaryHandler(
		DevkitServiceIconsCreateUpdateBulkProcedure,
		svc.IconsCreateUpdateBulk,
		connect.WithSchema(devkitServiceIconsCreateUpdateBulkMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceBucketCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceBucketCreateUpdateProcedure,
		svc.BucketCreateUpdate,
		connect.WithSchema(devkitServiceBucketCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceFilesListHandler := connect.NewUnaryHandler(
		DevkitServiceFilesListProcedure,
		svc.FilesList,
		connect.WithSchema(devkitServiceFilesListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceBucketsListHandler := connect.NewUnaryHandler(
		DevkitServiceBucketsListProcedure,
		svc.BucketsList,
		connect.WithSchema(devkitServiceBucketsListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUploadFileHandler := connect.NewUnaryHandler(
		DevkitServiceUploadFileProcedure,
		svc.UploadFile,
		connect.WithSchema(devkitServiceUploadFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUploadFilesHandler := connect.NewUnaryHandler(
		DevkitServiceUploadFilesProcedure,
		svc.UploadFiles,
		connect.WithSchema(devkitServiceUploadFilesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceFilesDeleteHandler := connect.NewUnaryHandler(
		DevkitServiceFilesDeleteProcedure,
		svc.FilesDelete,
		connect.WithSchema(devkitServiceFilesDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceImportTableHandler := connect.NewUnaryHandler(
		DevkitServiceImportTableProcedure,
		svc.ImportTable,
		connect.WithSchema(devkitServiceImportTableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceSendEmailHandler := connect.NewUnaryHandler(
		DevkitServiceSendEmailProcedure,
		svc.SendEmail,
		connect.WithSchema(devkitServiceSendEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTranslationsCreateUpdateBulkHandler := connect.NewUnaryHandler(
		DevkitServiceTranslationsCreateUpdateBulkProcedure,
		svc.TranslationsCreateUpdateBulk,
		connect.WithSchema(devkitServiceTranslationsCreateUpdateBulkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTranslationsDeleteHandler := connect.NewUnaryHandler(
		DevkitServiceTranslationsDeleteProcedure,
		svc.TranslationsDelete,
		connect.WithSchema(devkitServiceTranslationsDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTranslationsListHandler := connect.NewUnaryHandler(
		DevkitServiceTranslationsListProcedure,
		svc.TranslationsList,
		connect.WithSchema(devkitServiceTranslationsListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceRolesListHandler := connect.NewUnaryHandler(
		DevkitServiceRolesListProcedure,
		svc.RolesList,
		connect.WithSchema(devkitServiceRolesListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceRoleCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceRoleCreateUpdateProcedure,
		svc.RoleCreateUpdate,
		connect.WithSchema(devkitServiceRoleCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceRolesDeleteRestoreHandler := connect.NewUnaryHandler(
		DevkitServiceRolesDeleteRestoreProcedure,
		svc.RolesDeleteRestore,
		connect.WithSchema(devkitServiceRolesDeleteRestoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUsersListHandler := connect.NewUnaryHandler(
		DevkitServiceUsersListProcedure,
		svc.UsersList,
		connect.WithSchema(devkitServiceUsersListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceUserCreateUpdateProcedure,
		svc.UserCreateUpdate,
		connect.WithSchema(devkitServiceUserCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserDeleteHandler := connect.NewUnaryHandler(
		DevkitServiceUserDeleteProcedure,
		svc.UserDelete,
		connect.WithSchema(devkitServiceUserDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUsersDeleteRestoreHandler := connect.NewUnaryHandler(
		DevkitServiceUsersDeleteRestoreProcedure,
		svc.UsersDeleteRestore,
		connect.WithSchema(devkitServiceUsersDeleteRestoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserLoginProviderCallbackHandler := connect.NewUnaryHandler(
		DevkitServiceUserLoginProviderCallbackProcedure,
		svc.UserLoginProviderCallback,
		connect.WithSchema(devkitServiceUserLoginProviderCallbackMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserResetPasswordHandler := connect.NewUnaryHandler(
		DevkitServiceUserResetPasswordProcedure,
		svc.UserResetPassword,
		connect.WithSchema(devkitServiceUserResetPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserResetPasswordEmailHandler := connect.NewUnaryHandler(
		DevkitServiceUserResetPasswordEmailProcedure,
		svc.UserResetPasswordEmail,
		connect.WithSchema(devkitServiceUserResetPasswordEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserLoginProviderHandler := connect.NewUnaryHandler(
		DevkitServiceUserLoginProviderProcedure,
		svc.UserLoginProvider,
		connect.WithSchema(devkitServiceUserLoginProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserInviteHandler := connect.NewUnaryHandler(
		DevkitServiceUserInviteProcedure,
		svc.UserInvite,
		connect.WithSchema(devkitServiceUserInviteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserAuthorizeHandler := connect.NewUnaryHandler(
		DevkitServiceUserAuthorizeProcedure,
		svc.UserAuthorize,
		connect.WithSchema(devkitServiceUserAuthorizeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserLoginHandler := connect.NewUnaryHandler(
		DevkitServiceUserLoginProcedure,
		svc.UserLogin,
		connect.WithSchema(devkitServiceUserLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/devkit.v1.DevkitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DevkitServiceSettingsUpdateProcedure:
			devkitServiceSettingsUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceSettingsFindForUpdateProcedure:
			devkitServiceSettingsFindForUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceIconsListProcedure:
			devkitServiceIconsListHandler.ServeHTTP(w, r)
		case DevkitServiceIconsCreateUpdateBulkProcedure:
			devkitServiceIconsCreateUpdateBulkHandler.ServeHTTP(w, r)
		case DevkitServiceBucketCreateUpdateProcedure:
			devkitServiceBucketCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceFilesListProcedure:
			devkitServiceFilesListHandler.ServeHTTP(w, r)
		case DevkitServiceBucketsListProcedure:
			devkitServiceBucketsListHandler.ServeHTTP(w, r)
		case DevkitServiceUploadFileProcedure:
			devkitServiceUploadFileHandler.ServeHTTP(w, r)
		case DevkitServiceUploadFilesProcedure:
			devkitServiceUploadFilesHandler.ServeHTTP(w, r)
		case DevkitServiceFilesDeleteProcedure:
			devkitServiceFilesDeleteHandler.ServeHTTP(w, r)
		case DevkitServiceImportTableProcedure:
			devkitServiceImportTableHandler.ServeHTTP(w, r)
		case DevkitServiceSendEmailProcedure:
			devkitServiceSendEmailHandler.ServeHTTP(w, r)
		case DevkitServiceTranslationsCreateUpdateBulkProcedure:
			devkitServiceTranslationsCreateUpdateBulkHandler.ServeHTTP(w, r)
		case DevkitServiceTranslationsDeleteProcedure:
			devkitServiceTranslationsDeleteHandler.ServeHTTP(w, r)
		case DevkitServiceTranslationsListProcedure:
			devkitServiceTranslationsListHandler.ServeHTTP(w, r)
		case DevkitServiceRolesListProcedure:
			devkitServiceRolesListHandler.ServeHTTP(w, r)
		case DevkitServiceRoleCreateUpdateProcedure:
			devkitServiceRoleCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceRolesDeleteRestoreProcedure:
			devkitServiceRolesDeleteRestoreHandler.ServeHTTP(w, r)
		case DevkitServiceUsersListProcedure:
			devkitServiceUsersListHandler.ServeHTTP(w, r)
		case DevkitServiceUserCreateUpdateProcedure:
			devkitServiceUserCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceUserDeleteProcedure:
			devkitServiceUserDeleteHandler.ServeHTTP(w, r)
		case DevkitServiceUsersDeleteRestoreProcedure:
			devkitServiceUsersDeleteRestoreHandler.ServeHTTP(w, r)
		case DevkitServiceUserLoginProviderCallbackProcedure:
			devkitServiceUserLoginProviderCallbackHandler.ServeHTTP(w, r)
		case DevkitServiceUserResetPasswordProcedure:
			devkitServiceUserResetPasswordHandler.ServeHTTP(w, r)
		case DevkitServiceUserResetPasswordEmailProcedure:
			devkitServiceUserResetPasswordEmailHandler.ServeHTTP(w, r)
		case DevkitServiceUserLoginProviderProcedure:
			devkitServiceUserLoginProviderHandler.ServeHTTP(w, r)
		case DevkitServiceUserInviteProcedure:
			devkitServiceUserInviteHandler.ServeHTTP(w, r)
		case DevkitServiceUserAuthorizeProcedure:
			devkitServiceUserAuthorizeHandler.ServeHTTP(w, r)
		case DevkitServiceUserLoginProcedure:
			devkitServiceUserLoginHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDevkitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDevkitServiceHandler struct{}

func (UnimplementedDevkitServiceHandler) SettingsUpdate(context.Context, *connect.Request[v1.SettingsUpdateRequest]) (*connect.Response[v1.SettingsUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.SettingsUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) SettingsFindForUpdate(context.Context, *connect.Request[v1.SettingsFindForUpdateRequest]) (*connect.Response[v1.SettingsFindForUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.SettingsFindForUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) IconsList(context.Context, *connect.Request[v1.IconsListRequest]) (*connect.Response[v1.IconsListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.IconsList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) IconsCreateUpdateBulk(context.Context, *connect.Request[v1.IconsCreateUpdateBulkRequest]) (*connect.Response[v1.IconsCreateUpdateBulkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.IconsCreateUpdateBulk is not implemented"))
}

func (UnimplementedDevkitServiceHandler) BucketCreateUpdate(context.Context, *connect.Request[v1.BucketCreateUpdateRequest]) (*connect.Response[v1.BucketCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.BucketCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) FilesList(context.Context, *connect.Request[v1.FilesListRequest]) (*connect.Response[v1.FilesListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.FilesList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) BucketsList(context.Context, *connect.Request[v1.BucketsListRequest]) (*connect.Response[v1.BucketsListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.BucketsList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UploadFile(context.Context, *connect.Request[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UploadFile is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UploadFiles(context.Context, *connect.Request[v1.UploadFilesRequest]) (*connect.Response[v1.UploadFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UploadFiles is not implemented"))
}

func (UnimplementedDevkitServiceHandler) FilesDelete(context.Context, *connect.Request[v1.FilesDeleteRequest]) (*connect.Response[v1.FilesDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.FilesDelete is not implemented"))
}

func (UnimplementedDevkitServiceHandler) ImportTable(context.Context, *connect.Request[v1.ImportTableRequest]) (*connect.Response[v1.ImportTableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.ImportTable is not implemented"))
}

func (UnimplementedDevkitServiceHandler) SendEmail(context.Context, *connect.Request[v1.SendEmailRequest]) (*connect.Response[v1.SendEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.SendEmail is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TranslationsCreateUpdateBulk(context.Context, *connect.Request[v1.TranslationsCreateUpdateBulkRequest]) (*connect.Response[v1.TranslationsCreateUpdateBulkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TranslationsCreateUpdateBulk is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TranslationsDelete(context.Context, *connect.Request[v1.TranslationsDeleteRequest]) (*connect.Response[v1.TranslationsDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TranslationsDelete is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TranslationsList(context.Context, *connect.Request[v1.TranslationsListRequest]) (*connect.Response[v1.TranslationsListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TranslationsList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) RolesList(context.Context, *connect.Request[v1.RolesListRequest]) (*connect.Response[v1.RolesListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.RolesList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) RoleCreateUpdate(context.Context, *connect.Request[v1.RoleCreateUpdateRequest]) (*connect.Response[v1.RoleCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.RoleCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) RolesDeleteRestore(context.Context, *connect.Request[v1.RolesDeleteRestoreRequest]) (*connect.Response[v1.RolesDeleteRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.RolesDeleteRestore is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UsersList(context.Context, *connect.Request[v1.UsersListRequest]) (*connect.Response[v1.UsersListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UsersList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserCreateUpdate(context.Context, *connect.Request[v1.UserCreateUpdateRequest]) (*connect.Response[v1.UserCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserDelete is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UsersDeleteRestore(context.Context, *connect.Request[v1.UsersDeleteRestoreRequest]) (*connect.Response[v1.UsersDeleteRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UsersDeleteRestore is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserLoginProviderCallback(context.Context, *connect.Request[v1.UserLoginProviderCallbackRequest]) (*connect.Response[v1.UserLoginProviderCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserLoginProviderCallback is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserResetPassword(context.Context, *connect.Request[v1.UserResetPasswordRequest]) (*connect.Response[v1.UserResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserResetPassword is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserResetPasswordEmail(context.Context, *connect.Request[v1.UserResetPasswordEmailRequest]) (*connect.Response[v1.UserResetPasswordEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserResetPasswordEmail is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserLoginProvider(context.Context, *connect.Request[v1.UserLoginProviderRequest]) (*connect.Response[v1.UserLoginProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserLoginProvider is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserInvite(context.Context, *connect.Request[v1.UserInviteRequest]) (*connect.Response[v1.UserInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserInvite is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserAuthorize(context.Context, *connect.Request[v1.UserAuthorizeRequest]) (*connect.Response[v1.UserAuthorizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserAuthorize is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserLogin(context.Context, *connect.Request[v1.UserLoginRequest]) (*connect.Response[v1.UserLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserLogin is not implemented"))
}
