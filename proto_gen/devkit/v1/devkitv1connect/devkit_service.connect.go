// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: devkit/v1/devkit_service.proto

package devkitv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/darwishdev/devkit-api/proto_gen/devkit/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DevkitServiceName is the fully-qualified name of the DevkitService service.
	DevkitServiceName = "devkit.v1.DevkitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DevkitServiceCityListInputProcedure is the fully-qualified name of the DevkitService's
	// CityListInput RPC.
	DevkitServiceCityListInputProcedure = "/devkit.v1.DevkitService/CityListInput"
	// DevkitServiceCityListProcedure is the fully-qualified name of the DevkitService's CityList RPC.
	DevkitServiceCityListProcedure = "/devkit.v1.DevkitService/CityList"
	// DevkitServiceLocationListInputProcedure is the fully-qualified name of the DevkitService's
	// LocationListInput RPC.
	DevkitServiceLocationListInputProcedure = "/devkit.v1.DevkitService/LocationListInput"
	// DevkitServiceLocationListProcedure is the fully-qualified name of the DevkitService's
	// LocationList RPC.
	DevkitServiceLocationListProcedure = "/devkit.v1.DevkitService/LocationList"
	// DevkitServiceTenantDeleteRestoreProcedure is the fully-qualified name of the DevkitService's
	// TenantDeleteRestore RPC.
	DevkitServiceTenantDeleteRestoreProcedure = "/devkit.v1.DevkitService/TenantDeleteRestore"
	// DevkitServiceTenantFindProcedure is the fully-qualified name of the DevkitService's TenantFind
	// RPC.
	DevkitServiceTenantFindProcedure = "/devkit.v1.DevkitService/TenantFind"
	// DevkitServiceTenantListProcedure is the fully-qualified name of the DevkitService's TenantList
	// RPC.
	DevkitServiceTenantListProcedure = "/devkit.v1.DevkitService/TenantList"
	// DevkitServiceTenantCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// TenantCreateUpdate RPC.
	DevkitServiceTenantCreateUpdateProcedure = "/devkit.v1.DevkitService/TenantCreateUpdate"
	// DevkitServiceSettingFindForUpdateProcedure is the fully-qualified name of the DevkitService's
	// SettingFindForUpdate RPC.
	DevkitServiceSettingFindForUpdateProcedure = "/devkit.v1.DevkitService/SettingFindForUpdate"
	// DevkitServiceSettingUpdateProcedure is the fully-qualified name of the DevkitService's
	// SettingUpdate RPC.
	DevkitServiceSettingUpdateProcedure = "/devkit.v1.DevkitService/SettingUpdate"
	// DevkitServiceIconListProcedure is the fully-qualified name of the DevkitService's IconList RPC.
	DevkitServiceIconListProcedure = "/devkit.v1.DevkitService/IconList"
	// DevkitServiceIconFindProcedure is the fully-qualified name of the DevkitService's IconFind RPC.
	DevkitServiceIconFindProcedure = "/devkit.v1.DevkitService/IconFind"
	// DevkitServiceIconCreateUpdateBulkProcedure is the fully-qualified name of the DevkitService's
	// IconCreateUpdateBulk RPC.
	DevkitServiceIconCreateUpdateBulkProcedure = "/devkit.v1.DevkitService/IconCreateUpdateBulk"
	// DevkitServiceBucketListProcedure is the fully-qualified name of the DevkitService's BucketList
	// RPC.
	DevkitServiceBucketListProcedure = "/devkit.v1.DevkitService/BucketList"
	// DevkitServiceBucketCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// BucketCreateUpdate RPC.
	DevkitServiceBucketCreateUpdateProcedure = "/devkit.v1.DevkitService/BucketCreateUpdate"
	// DevkitServiceFileListProcedure is the fully-qualified name of the DevkitService's FileList RPC.
	DevkitServiceFileListProcedure = "/devkit.v1.DevkitService/FileList"
	// DevkitServiceFileCreateProcedure is the fully-qualified name of the DevkitService's FileCreate
	// RPC.
	DevkitServiceFileCreateProcedure = "/devkit.v1.DevkitService/FileCreate"
	// DevkitServiceFileCreateBulkProcedure is the fully-qualified name of the DevkitService's
	// FileCreateBulk RPC.
	DevkitServiceFileCreateBulkProcedure = "/devkit.v1.DevkitService/FileCreateBulk"
	// DevkitServiceFileDeleteProcedure is the fully-qualified name of the DevkitService's FileDelete
	// RPC.
	DevkitServiceFileDeleteProcedure = "/devkit.v1.DevkitService/FileDelete"
	// DevkitServiceImportTableProcedure is the fully-qualified name of the DevkitService's ImportTable
	// RPC.
	DevkitServiceImportTableProcedure = "/devkit.v1.DevkitService/ImportTable"
	// DevkitServiceEmailSendProcedure is the fully-qualified name of the DevkitService's EmailSend RPC.
	DevkitServiceEmailSendProcedure = "/devkit.v1.DevkitService/EmailSend"
	// DevkitServiceTranslationListProcedure is the fully-qualified name of the DevkitService's
	// TranslationList RPC.
	DevkitServiceTranslationListProcedure = "/devkit.v1.DevkitService/TranslationList"
	// DevkitServiceTranslationFindLocaleProcedure is the fully-qualified name of the DevkitService's
	// TranslationFindLocale RPC.
	DevkitServiceTranslationFindLocaleProcedure = "/devkit.v1.DevkitService/TranslationFindLocale"
	// DevkitServiceTranslationCreateUpdateBulkProcedure is the fully-qualified name of the
	// DevkitService's TranslationCreateUpdateBulk RPC.
	DevkitServiceTranslationCreateUpdateBulkProcedure = "/devkit.v1.DevkitService/TranslationCreateUpdateBulk"
	// DevkitServiceTranslationDeleteProcedure is the fully-qualified name of the DevkitService's
	// TranslationDelete RPC.
	DevkitServiceTranslationDeleteProcedure = "/devkit.v1.DevkitService/TranslationDelete"
	// DevkitServiceRoleListProcedure is the fully-qualified name of the DevkitService's RoleList RPC.
	DevkitServiceRoleListProcedure = "/devkit.v1.DevkitService/RoleList"
	// DevkitServiceRoleListInputProcedure is the fully-qualified name of the DevkitService's
	// RoleListInput RPC.
	DevkitServiceRoleListInputProcedure = "/devkit.v1.DevkitService/RoleListInput"
	// DevkitServiceRoleFindForUpdateProcedure is the fully-qualified name of the DevkitService's
	// RoleFindForUpdate RPC.
	DevkitServiceRoleFindForUpdateProcedure = "/devkit.v1.DevkitService/RoleFindForUpdate"
	// DevkitServiceRoleCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// RoleCreateUpdate RPC.
	DevkitServiceRoleCreateUpdateProcedure = "/devkit.v1.DevkitService/RoleCreateUpdate"
	// DevkitServiceRoleDeleteRestoreProcedure is the fully-qualified name of the DevkitService's
	// RoleDeleteRestore RPC.
	DevkitServiceRoleDeleteRestoreProcedure = "/devkit.v1.DevkitService/RoleDeleteRestore"
	// DevkitServiceRoleDeleteProcedure is the fully-qualified name of the DevkitService's RoleDelete
	// RPC.
	DevkitServiceRoleDeleteProcedure = "/devkit.v1.DevkitService/RoleDelete"
	// DevkitServiceUserListProcedure is the fully-qualified name of the DevkitService's UserList RPC.
	DevkitServiceUserListProcedure = "/devkit.v1.DevkitService/UserList"
	// DevkitServiceUserListInputProcedure is the fully-qualified name of the DevkitService's
	// UserListInput RPC.
	DevkitServiceUserListInputProcedure = "/devkit.v1.DevkitService/UserListInput"
	// DevkitServiceUserTypeListInputProcedure is the fully-qualified name of the DevkitService's
	// UserTypeListInput RPC.
	DevkitServiceUserTypeListInputProcedure = "/devkit.v1.DevkitService/UserTypeListInput"
	// DevkitServiceUserFindForUpdateProcedure is the fully-qualified name of the DevkitService's
	// UserFindForUpdate RPC.
	DevkitServiceUserFindForUpdateProcedure = "/devkit.v1.DevkitService/UserFindForUpdate"
	// DevkitServiceUserCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// UserCreateUpdate RPC.
	DevkitServiceUserCreateUpdateProcedure = "/devkit.v1.DevkitService/UserCreateUpdate"
	// DevkitServiceUserDeleteRestoreProcedure is the fully-qualified name of the DevkitService's
	// UserDeleteRestore RPC.
	DevkitServiceUserDeleteRestoreProcedure = "/devkit.v1.DevkitService/UserDeleteRestore"
	// DevkitServiceUserDeleteProcedure is the fully-qualified name of the DevkitService's UserDelete
	// RPC.
	DevkitServiceUserDeleteProcedure = "/devkit.v1.DevkitService/UserDelete"
	// DevkitServiceAuthLoginProcedure is the fully-qualified name of the DevkitService's AuthLogin RPC.
	DevkitServiceAuthLoginProcedure = "/devkit.v1.DevkitService/AuthLogin"
	// DevkitServiceAuthRegisterProcedure is the fully-qualified name of the DevkitService's
	// AuthRegister RPC.
	DevkitServiceAuthRegisterProcedure = "/devkit.v1.DevkitService/AuthRegister"
	// DevkitServiceAuthInviteProcedure is the fully-qualified name of the DevkitService's AuthInvite
	// RPC.
	DevkitServiceAuthInviteProcedure = "/devkit.v1.DevkitService/AuthInvite"
	// DevkitServiceAuthAuthorizeProcedure is the fully-qualified name of the DevkitService's
	// AuthAuthorize RPC.
	DevkitServiceAuthAuthorizeProcedure = "/devkit.v1.DevkitService/AuthAuthorize"
	// DevkitServiceAuthLoginProviderProcedure is the fully-qualified name of the DevkitService's
	// AuthLoginProvider RPC.
	DevkitServiceAuthLoginProviderProcedure = "/devkit.v1.DevkitService/AuthLoginProvider"
	// DevkitServiceAuthLoginProviderCallbackProcedure is the fully-qualified name of the
	// DevkitService's AuthLoginProviderCallback RPC.
	DevkitServiceAuthLoginProviderCallbackProcedure = "/devkit.v1.DevkitService/AuthLoginProviderCallback"
	// DevkitServiceAuthResetPasswordEmailProcedure is the fully-qualified name of the DevkitService's
	// AuthResetPasswordEmail RPC.
	DevkitServiceAuthResetPasswordEmailProcedure = "/devkit.v1.DevkitService/AuthResetPasswordEmail"
	// DevkitServiceAuthResetPasswordProcedure is the fully-qualified name of the DevkitService's
	// AuthResetPassword RPC.
	DevkitServiceAuthResetPasswordProcedure = "/devkit.v1.DevkitService/AuthResetPassword"
	// DevkitServicePartialDeleteRestoreProcedure is the fully-qualified name of the DevkitService's
	// PartialDeleteRestore RPC.
	DevkitServicePartialDeleteRestoreProcedure = "/devkit.v1.DevkitService/PartialDeleteRestore"
	// DevkitServicePartialCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// PartialCreateUpdate RPC.
	DevkitServicePartialCreateUpdateProcedure = "/devkit.v1.DevkitService/PartialCreateUpdate"
	// DevkitServicePartialListProcedure is the fully-qualified name of the DevkitService's PartialList
	// RPC.
	DevkitServicePartialListProcedure = "/devkit.v1.DevkitService/PartialList"
	// DevkitServicePageDeleteRestoreProcedure is the fully-qualified name of the DevkitService's
	// PageDeleteRestore RPC.
	DevkitServicePageDeleteRestoreProcedure = "/devkit.v1.DevkitService/PageDeleteRestore"
	// DevkitServicePageCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// PageCreateUpdate RPC.
	DevkitServicePageCreateUpdateProcedure = "/devkit.v1.DevkitService/PageCreateUpdate"
	// DevkitServicePageListProcedure is the fully-qualified name of the DevkitService's PageList RPC.
	DevkitServicePageListProcedure = "/devkit.v1.DevkitService/PageList"
	// DevkitServiceSectionDeleteRestoreProcedure is the fully-qualified name of the DevkitService's
	// SectionDeleteRestore RPC.
	DevkitServiceSectionDeleteRestoreProcedure = "/devkit.v1.DevkitService/SectionDeleteRestore"
	// DevkitServiceSectionCreateUpdateProcedure is the fully-qualified name of the DevkitService's
	// SectionCreateUpdate RPC.
	DevkitServiceSectionCreateUpdateProcedure = "/devkit.v1.DevkitService/SectionCreateUpdate"
	// DevkitServiceSectionListProcedure is the fully-qualified name of the DevkitService's SectionList
	// RPC.
	DevkitServiceSectionListProcedure = "/devkit.v1.DevkitService/SectionList"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	devkitServiceServiceDescriptor                           = v1.File_devkit_v1_devkit_service_proto.Services().ByName("DevkitService")
	devkitServiceCityListInputMethodDescriptor               = devkitServiceServiceDescriptor.Methods().ByName("CityListInput")
	devkitServiceCityListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("CityList")
	devkitServiceLocationListInputMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("LocationListInput")
	devkitServiceLocationListMethodDescriptor                = devkitServiceServiceDescriptor.Methods().ByName("LocationList")
	devkitServiceTenantDeleteRestoreMethodDescriptor         = devkitServiceServiceDescriptor.Methods().ByName("TenantDeleteRestore")
	devkitServiceTenantFindMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("TenantFind")
	devkitServiceTenantListMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("TenantList")
	devkitServiceTenantCreateUpdateMethodDescriptor          = devkitServiceServiceDescriptor.Methods().ByName("TenantCreateUpdate")
	devkitServiceSettingFindForUpdateMethodDescriptor        = devkitServiceServiceDescriptor.Methods().ByName("SettingFindForUpdate")
	devkitServiceSettingUpdateMethodDescriptor               = devkitServiceServiceDescriptor.Methods().ByName("SettingUpdate")
	devkitServiceIconListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("IconList")
	devkitServiceIconFindMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("IconFind")
	devkitServiceIconCreateUpdateBulkMethodDescriptor        = devkitServiceServiceDescriptor.Methods().ByName("IconCreateUpdateBulk")
	devkitServiceBucketListMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("BucketList")
	devkitServiceBucketCreateUpdateMethodDescriptor          = devkitServiceServiceDescriptor.Methods().ByName("BucketCreateUpdate")
	devkitServiceFileListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("FileList")
	devkitServiceFileCreateMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("FileCreate")
	devkitServiceFileCreateBulkMethodDescriptor              = devkitServiceServiceDescriptor.Methods().ByName("FileCreateBulk")
	devkitServiceFileDeleteMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("FileDelete")
	devkitServiceImportTableMethodDescriptor                 = devkitServiceServiceDescriptor.Methods().ByName("ImportTable")
	devkitServiceEmailSendMethodDescriptor                   = devkitServiceServiceDescriptor.Methods().ByName("EmailSend")
	devkitServiceTranslationListMethodDescriptor             = devkitServiceServiceDescriptor.Methods().ByName("TranslationList")
	devkitServiceTranslationFindLocaleMethodDescriptor       = devkitServiceServiceDescriptor.Methods().ByName("TranslationFindLocale")
	devkitServiceTranslationCreateUpdateBulkMethodDescriptor = devkitServiceServiceDescriptor.Methods().ByName("TranslationCreateUpdateBulk")
	devkitServiceTranslationDeleteMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("TranslationDelete")
	devkitServiceRoleListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("RoleList")
	devkitServiceRoleListInputMethodDescriptor               = devkitServiceServiceDescriptor.Methods().ByName("RoleListInput")
	devkitServiceRoleFindForUpdateMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("RoleFindForUpdate")
	devkitServiceRoleCreateUpdateMethodDescriptor            = devkitServiceServiceDescriptor.Methods().ByName("RoleCreateUpdate")
	devkitServiceRoleDeleteRestoreMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("RoleDeleteRestore")
	devkitServiceRoleDeleteMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("RoleDelete")
	devkitServiceUserListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("UserList")
	devkitServiceUserListInputMethodDescriptor               = devkitServiceServiceDescriptor.Methods().ByName("UserListInput")
	devkitServiceUserTypeListInputMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("UserTypeListInput")
	devkitServiceUserFindForUpdateMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("UserFindForUpdate")
	devkitServiceUserCreateUpdateMethodDescriptor            = devkitServiceServiceDescriptor.Methods().ByName("UserCreateUpdate")
	devkitServiceUserDeleteRestoreMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("UserDeleteRestore")
	devkitServiceUserDeleteMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("UserDelete")
	devkitServiceAuthLoginMethodDescriptor                   = devkitServiceServiceDescriptor.Methods().ByName("AuthLogin")
	devkitServiceAuthRegisterMethodDescriptor                = devkitServiceServiceDescriptor.Methods().ByName("AuthRegister")
	devkitServiceAuthInviteMethodDescriptor                  = devkitServiceServiceDescriptor.Methods().ByName("AuthInvite")
	devkitServiceAuthAuthorizeMethodDescriptor               = devkitServiceServiceDescriptor.Methods().ByName("AuthAuthorize")
	devkitServiceAuthLoginProviderMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("AuthLoginProvider")
	devkitServiceAuthLoginProviderCallbackMethodDescriptor   = devkitServiceServiceDescriptor.Methods().ByName("AuthLoginProviderCallback")
	devkitServiceAuthResetPasswordEmailMethodDescriptor      = devkitServiceServiceDescriptor.Methods().ByName("AuthResetPasswordEmail")
	devkitServiceAuthResetPasswordMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("AuthResetPassword")
	devkitServicePartialDeleteRestoreMethodDescriptor        = devkitServiceServiceDescriptor.Methods().ByName("PartialDeleteRestore")
	devkitServicePartialCreateUpdateMethodDescriptor         = devkitServiceServiceDescriptor.Methods().ByName("PartialCreateUpdate")
	devkitServicePartialListMethodDescriptor                 = devkitServiceServiceDescriptor.Methods().ByName("PartialList")
	devkitServicePageDeleteRestoreMethodDescriptor           = devkitServiceServiceDescriptor.Methods().ByName("PageDeleteRestore")
	devkitServicePageCreateUpdateMethodDescriptor            = devkitServiceServiceDescriptor.Methods().ByName("PageCreateUpdate")
	devkitServicePageListMethodDescriptor                    = devkitServiceServiceDescriptor.Methods().ByName("PageList")
	devkitServiceSectionDeleteRestoreMethodDescriptor        = devkitServiceServiceDescriptor.Methods().ByName("SectionDeleteRestore")
	devkitServiceSectionCreateUpdateMethodDescriptor         = devkitServiceServiceDescriptor.Methods().ByName("SectionCreateUpdate")
	devkitServiceSectionListMethodDescriptor                 = devkitServiceServiceDescriptor.Methods().ByName("SectionList")
)

// DevkitServiceClient is a client for the devkit.v1.DevkitService service.
type DevkitServiceClient interface {
	// INJECT METHODS
	CityListInput(context.Context, *connect.Request[v1.CityListInputRequest]) (*connect.Response[v1.CityListInputResponse], error)
	CityList(context.Context, *connect.Request[v1.CityListRequest]) (*connect.Response[v1.CityListResponse], error)
	LocationListInput(context.Context, *connect.Request[v1.LocationListInputRequest]) (*connect.Response[v1.LocationListInputResponse], error)
	LocationList(context.Context, *connect.Request[v1.LocationListRequest]) (*connect.Response[v1.LocationListResponse], error)
	TenantDeleteRestore(context.Context, *connect.Request[v1.TenantDeleteRestoreRequest]) (*connect.Response[v1.TenantDeleteRestoreResponse], error)
	TenantFind(context.Context, *connect.Request[v1.TenantFindRequest]) (*connect.Response[v1.TenantFindResponse], error)
	TenantList(context.Context, *connect.Request[v1.TenantListRequest]) (*connect.Response[v1.TenantListResponse], error)
	TenantCreateUpdate(context.Context, *connect.Request[v1.TenantCreateUpdateRequest]) (*connect.Response[v1.TenantCreateUpdateResponse], error)
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// public
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// settings
	SettingFindForUpdate(context.Context, *connect.Request[v1.SettingFindForUpdateRequest]) (*connect.Response[v1.SettingFindForUpdateResponse], error)
	SettingUpdate(context.Context, *connect.Request[v1.SettingUpdateRequest]) (*connect.Response[v1.SettingUpdateResponse], error)
	// icons
	IconList(context.Context, *connect.Request[v1.IconListRequest]) (*connect.Response[v1.IconListResponse], error)
	IconFind(context.Context, *connect.Request[v1.IconFindRequest]) (*connect.Response[v1.IconFindResponse], error)
	IconCreateUpdateBulk(context.Context, *connect.Request[v1.IconCreateUpdateBulkRequest]) (*connect.Response[v1.IconCreateUpdateBulkResponse], error)
	// TODO: icon delete
	// buckets
	BucketList(context.Context, *connect.Request[v1.BucketListRequest]) (*connect.Response[v1.BucketListResponse], error)
	BucketCreateUpdate(context.Context, *connect.Request[v1.BucketCreateUpdateRequest]) (*connect.Response[v1.BucketCreateUpdateResponse], error)
	// files
	FileList(context.Context, *connect.Request[v1.FileListRequest]) (*connect.Response[v1.FileListResponse], error)
	FileCreate(context.Context, *connect.Request[v1.FileCreateRequest]) (*connect.Response[v1.FileCreateResponse], error)
	FileCreateBulk(context.Context, *connect.Request[v1.FileCreateBulkRequest]) (*connect.Response[v1.FileCreateBulkResponse], error)
	// rpc FileDeleteRestore(FileDeleteRestoreRequest) returns (FileDeleteRestoreResponse) {}
	FileDelete(context.Context, *connect.Request[v1.FileDeleteRequest]) (*connect.Response[v1.FileDeleteResponse], error)
	// import
	ImportTable(context.Context, *connect.Request[v1.ImportTableRequest]) (*connect.Response[v1.ImportTableResponse], error)
	// emails
	EmailSend(context.Context, *connect.Request[v1.EmailSendRequest]) (*connect.Response[v1.EmailSendResponse], error)
	// translations
	TranslationList(context.Context, *connect.Request[v1.TranslationListRequest]) (*connect.Response[v1.TranslationListResponse], error)
	TranslationFindLocale(context.Context, *connect.Request[v1.TranslationFindLocaleRequest]) (*connect.Response[v1.TranslationFindLocaleResponse], error)
	TranslationCreateUpdateBulk(context.Context, *connect.Request[v1.TranslationCreateUpdateBulkRequest]) (*connect.Response[v1.TranslationCreateUpdateBulkResponse], error)
	TranslationDelete(context.Context, *connect.Request[v1.TranslationDeleteRequest]) (*connect.Response[v1.TranslationDeleteResponse], error)
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// accounts
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// roles
	// *******************************************************************************************//
	RoleList(context.Context, *connect.Request[v1.RoleListRequest]) (*connect.Response[v1.RoleListResponse], error)
	RoleListInput(context.Context, *connect.Request[v1.RoleListInputRequest]) (*connect.Response[v1.RoleListInputResponse], error)
	RoleFindForUpdate(context.Context, *connect.Request[v1.RoleFindForUpdateRequest]) (*connect.Response[v1.RoleFindForUpdateResponse], error)
	RoleCreateUpdate(context.Context, *connect.Request[v1.RoleCreateUpdateRequest]) (*connect.Response[v1.RoleCreateUpdateResponse], error)
	RoleDeleteRestore(context.Context, *connect.Request[v1.RoleDeleteRestoreRequest]) (*connect.Response[v1.RoleDeleteRestoreResponse], error)
	RoleDelete(context.Context, *connect.Request[v1.RoleDeleteRequest]) (*connect.Response[v1.RoleDeleteResponse], error)
	// *******************************************************************************************//
	// users
	// *******************************************************************************************//
	UserList(context.Context, *connect.Request[v1.UserListRequest]) (*connect.Response[v1.UserListResponse], error)
	UserListInput(context.Context, *connect.Request[v1.UserListInputRequest]) (*connect.Response[v1.UserListInputResponse], error)
	UserTypeListInput(context.Context, *connect.Request[v1.UserTypeListInputRequest]) (*connect.Response[v1.UserTypeListInputResponse], error)
	UserFindForUpdate(context.Context, *connect.Request[v1.UserFindForUpdateRequest]) (*connect.Response[v1.UserFindForUpdateResponse], error)
	UserCreateUpdate(context.Context, *connect.Request[v1.UserCreateUpdateRequest]) (*connect.Response[v1.UserCreateUpdateResponse], error)
	UserDeleteRestore(context.Context, *connect.Request[v1.UserDeleteRestoreRequest]) (*connect.Response[v1.UserDeleteRestoreResponse], error)
	UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error)
	// *******************************************************************************************//
	// auth
	// *******************************************************************************************//
	AuthLogin(context.Context, *connect.Request[v1.AuthLoginRequest]) (*connect.Response[v1.AuthLoginResponse], error)
	AuthRegister(context.Context, *connect.Request[v1.AuthRegisterRequest]) (*connect.Response[v1.AuthRegisterResponse], error)
	AuthInvite(context.Context, *connect.Request[v1.AuthInviteRequest]) (*connect.Response[v1.AuthInviteResponse], error)
	AuthAuthorize(context.Context, *connect.Request[v1.AuthAuthorizeRequest]) (*connect.Response[v1.AuthAuthorizeResponse], error)
	AuthLoginProvider(context.Context, *connect.Request[v1.AuthLoginProviderRequest]) (*connect.Response[v1.AuthLoginProviderResponse], error)
	AuthLoginProviderCallback(context.Context, *connect.Request[v1.AuthLoginProviderCallbackRequest]) (*connect.Response[v1.AuthLoginProviderCallbackResponse], error)
	AuthResetPasswordEmail(context.Context, *connect.Request[v1.AuthResetPasswordEmailRequest]) (*connect.Response[v1.AuthResetPasswordEmailResponse], error)
	AuthResetPassword(context.Context, *connect.Request[v1.AuthResetPasswordRequest]) (*connect.Response[v1.AuthResetPasswordResponse], error)
	PartialDeleteRestore(context.Context, *connect.Request[v1.PartialDeleteRestoreRequest]) (*connect.Response[v1.PartialDeleteRestoreResponse], error)
	PartialCreateUpdate(context.Context, *connect.Request[v1.PartialCreateUpdateRequest]) (*connect.Response[v1.PartialCreateUpdateResponse], error)
	PartialList(context.Context, *connect.Request[v1.PartialListRequest]) (*connect.Response[v1.PartialListResponse], error)
	PageDeleteRestore(context.Context, *connect.Request[v1.PageDeleteRestoreRequest]) (*connect.Response[v1.PageDeleteRestoreResponse], error)
	PageCreateUpdate(context.Context, *connect.Request[v1.PageCreateUpdateRequest]) (*connect.Response[v1.PageCreateUpdateResponse], error)
	PageList(context.Context, *connect.Request[v1.PageListRequest]) (*connect.Response[v1.PageListResponse], error)
	SectionDeleteRestore(context.Context, *connect.Request[v1.SectionDeleteRestoreRequest]) (*connect.Response[v1.SectionDeleteRestoreResponse], error)
	SectionCreateUpdate(context.Context, *connect.Request[v1.SectionCreateUpdateRequest]) (*connect.Response[v1.SectionCreateUpdateResponse], error)
	SectionList(context.Context, *connect.Request[v1.SectionListRequest]) (*connect.Response[v1.SectionListResponse], error)
}

// NewDevkitServiceClient constructs a client for the devkit.v1.DevkitService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDevkitServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DevkitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &devkitServiceClient{
		cityListInput: connect.NewClient[v1.CityListInputRequest, v1.CityListInputResponse](
			httpClient,
			baseURL+DevkitServiceCityListInputProcedure,
			connect.WithSchema(devkitServiceCityListInputMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		cityList: connect.NewClient[v1.CityListRequest, v1.CityListResponse](
			httpClient,
			baseURL+DevkitServiceCityListProcedure,
			connect.WithSchema(devkitServiceCityListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		locationListInput: connect.NewClient[v1.LocationListInputRequest, v1.LocationListInputResponse](
			httpClient,
			baseURL+DevkitServiceLocationListInputProcedure,
			connect.WithSchema(devkitServiceLocationListInputMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		locationList: connect.NewClient[v1.LocationListRequest, v1.LocationListResponse](
			httpClient,
			baseURL+DevkitServiceLocationListProcedure,
			connect.WithSchema(devkitServiceLocationListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		tenantDeleteRestore: connect.NewClient[v1.TenantDeleteRestoreRequest, v1.TenantDeleteRestoreResponse](
			httpClient,
			baseURL+DevkitServiceTenantDeleteRestoreProcedure,
			connect.WithSchema(devkitServiceTenantDeleteRestoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tenantFind: connect.NewClient[v1.TenantFindRequest, v1.TenantFindResponse](
			httpClient,
			baseURL+DevkitServiceTenantFindProcedure,
			connect.WithSchema(devkitServiceTenantFindMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		tenantList: connect.NewClient[v1.TenantListRequest, v1.TenantListResponse](
			httpClient,
			baseURL+DevkitServiceTenantListProcedure,
			connect.WithSchema(devkitServiceTenantListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		tenantCreateUpdate: connect.NewClient[v1.TenantCreateUpdateRequest, v1.TenantCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServiceTenantCreateUpdateProcedure,
			connect.WithSchema(devkitServiceTenantCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		settingFindForUpdate: connect.NewClient[v1.SettingFindForUpdateRequest, v1.SettingFindForUpdateResponse](
			httpClient,
			baseURL+DevkitServiceSettingFindForUpdateProcedure,
			connect.WithSchema(devkitServiceSettingFindForUpdateMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		settingUpdate: connect.NewClient[v1.SettingUpdateRequest, v1.SettingUpdateResponse](
			httpClient,
			baseURL+DevkitServiceSettingUpdateProcedure,
			connect.WithSchema(devkitServiceSettingUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		iconList: connect.NewClient[v1.IconListRequest, v1.IconListResponse](
			httpClient,
			baseURL+DevkitServiceIconListProcedure,
			connect.WithSchema(devkitServiceIconListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		iconFind: connect.NewClient[v1.IconFindRequest, v1.IconFindResponse](
			httpClient,
			baseURL+DevkitServiceIconFindProcedure,
			connect.WithSchema(devkitServiceIconFindMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		iconCreateUpdateBulk: connect.NewClient[v1.IconCreateUpdateBulkRequest, v1.IconCreateUpdateBulkResponse](
			httpClient,
			baseURL+DevkitServiceIconCreateUpdateBulkProcedure,
			connect.WithSchema(devkitServiceIconCreateUpdateBulkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		bucketList: connect.NewClient[v1.BucketListRequest, v1.BucketListResponse](
			httpClient,
			baseURL+DevkitServiceBucketListProcedure,
			connect.WithSchema(devkitServiceBucketListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		bucketCreateUpdate: connect.NewClient[v1.BucketCreateUpdateRequest, v1.BucketCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServiceBucketCreateUpdateProcedure,
			connect.WithSchema(devkitServiceBucketCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fileList: connect.NewClient[v1.FileListRequest, v1.FileListResponse](
			httpClient,
			baseURL+DevkitServiceFileListProcedure,
			connect.WithSchema(devkitServiceFileListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		fileCreate: connect.NewClient[v1.FileCreateRequest, v1.FileCreateResponse](
			httpClient,
			baseURL+DevkitServiceFileCreateProcedure,
			connect.WithSchema(devkitServiceFileCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fileCreateBulk: connect.NewClient[v1.FileCreateBulkRequest, v1.FileCreateBulkResponse](
			httpClient,
			baseURL+DevkitServiceFileCreateBulkProcedure,
			connect.WithSchema(devkitServiceFileCreateBulkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fileDelete: connect.NewClient[v1.FileDeleteRequest, v1.FileDeleteResponse](
			httpClient,
			baseURL+DevkitServiceFileDeleteProcedure,
			connect.WithSchema(devkitServiceFileDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		importTable: connect.NewClient[v1.ImportTableRequest, v1.ImportTableResponse](
			httpClient,
			baseURL+DevkitServiceImportTableProcedure,
			connect.WithSchema(devkitServiceImportTableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		emailSend: connect.NewClient[v1.EmailSendRequest, v1.EmailSendResponse](
			httpClient,
			baseURL+DevkitServiceEmailSendProcedure,
			connect.WithSchema(devkitServiceEmailSendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		translationList: connect.NewClient[v1.TranslationListRequest, v1.TranslationListResponse](
			httpClient,
			baseURL+DevkitServiceTranslationListProcedure,
			connect.WithSchema(devkitServiceTranslationListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		translationFindLocale: connect.NewClient[v1.TranslationFindLocaleRequest, v1.TranslationFindLocaleResponse](
			httpClient,
			baseURL+DevkitServiceTranslationFindLocaleProcedure,
			connect.WithSchema(devkitServiceTranslationFindLocaleMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		translationCreateUpdateBulk: connect.NewClient[v1.TranslationCreateUpdateBulkRequest, v1.TranslationCreateUpdateBulkResponse](
			httpClient,
			baseURL+DevkitServiceTranslationCreateUpdateBulkProcedure,
			connect.WithSchema(devkitServiceTranslationCreateUpdateBulkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		translationDelete: connect.NewClient[v1.TranslationDeleteRequest, v1.TranslationDeleteResponse](
			httpClient,
			baseURL+DevkitServiceTranslationDeleteProcedure,
			connect.WithSchema(devkitServiceTranslationDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		roleList: connect.NewClient[v1.RoleListRequest, v1.RoleListResponse](
			httpClient,
			baseURL+DevkitServiceRoleListProcedure,
			connect.WithSchema(devkitServiceRoleListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		roleListInput: connect.NewClient[v1.RoleListInputRequest, v1.RoleListInputResponse](
			httpClient,
			baseURL+DevkitServiceRoleListInputProcedure,
			connect.WithSchema(devkitServiceRoleListInputMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		roleFindForUpdate: connect.NewClient[v1.RoleFindForUpdateRequest, v1.RoleFindForUpdateResponse](
			httpClient,
			baseURL+DevkitServiceRoleFindForUpdateProcedure,
			connect.WithSchema(devkitServiceRoleFindForUpdateMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		roleCreateUpdate: connect.NewClient[v1.RoleCreateUpdateRequest, v1.RoleCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServiceRoleCreateUpdateProcedure,
			connect.WithSchema(devkitServiceRoleCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		roleDeleteRestore: connect.NewClient[v1.RoleDeleteRestoreRequest, v1.RoleDeleteRestoreResponse](
			httpClient,
			baseURL+DevkitServiceRoleDeleteRestoreProcedure,
			connect.WithSchema(devkitServiceRoleDeleteRestoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		roleDelete: connect.NewClient[v1.RoleDeleteRequest, v1.RoleDeleteResponse](
			httpClient,
			baseURL+DevkitServiceRoleDeleteProcedure,
			connect.WithSchema(devkitServiceRoleDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userList: connect.NewClient[v1.UserListRequest, v1.UserListResponse](
			httpClient,
			baseURL+DevkitServiceUserListProcedure,
			connect.WithSchema(devkitServiceUserListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		userListInput: connect.NewClient[v1.UserListInputRequest, v1.UserListInputResponse](
			httpClient,
			baseURL+DevkitServiceUserListInputProcedure,
			connect.WithSchema(devkitServiceUserListInputMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		userTypeListInput: connect.NewClient[v1.UserTypeListInputRequest, v1.UserTypeListInputResponse](
			httpClient,
			baseURL+DevkitServiceUserTypeListInputProcedure,
			connect.WithSchema(devkitServiceUserTypeListInputMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		userFindForUpdate: connect.NewClient[v1.UserFindForUpdateRequest, v1.UserFindForUpdateResponse](
			httpClient,
			baseURL+DevkitServiceUserFindForUpdateProcedure,
			connect.WithSchema(devkitServiceUserFindForUpdateMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		userCreateUpdate: connect.NewClient[v1.UserCreateUpdateRequest, v1.UserCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServiceUserCreateUpdateProcedure,
			connect.WithSchema(devkitServiceUserCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userDeleteRestore: connect.NewClient[v1.UserDeleteRestoreRequest, v1.UserDeleteRestoreResponse](
			httpClient,
			baseURL+DevkitServiceUserDeleteRestoreProcedure,
			connect.WithSchema(devkitServiceUserDeleteRestoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userDelete: connect.NewClient[v1.UserDeleteRequest, v1.UserDeleteResponse](
			httpClient,
			baseURL+DevkitServiceUserDeleteProcedure,
			connect.WithSchema(devkitServiceUserDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authLogin: connect.NewClient[v1.AuthLoginRequest, v1.AuthLoginResponse](
			httpClient,
			baseURL+DevkitServiceAuthLoginProcedure,
			connect.WithSchema(devkitServiceAuthLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authRegister: connect.NewClient[v1.AuthRegisterRequest, v1.AuthRegisterResponse](
			httpClient,
			baseURL+DevkitServiceAuthRegisterProcedure,
			connect.WithSchema(devkitServiceAuthRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authInvite: connect.NewClient[v1.AuthInviteRequest, v1.AuthInviteResponse](
			httpClient,
			baseURL+DevkitServiceAuthInviteProcedure,
			connect.WithSchema(devkitServiceAuthInviteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authAuthorize: connect.NewClient[v1.AuthAuthorizeRequest, v1.AuthAuthorizeResponse](
			httpClient,
			baseURL+DevkitServiceAuthAuthorizeProcedure,
			connect.WithSchema(devkitServiceAuthAuthorizeMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		authLoginProvider: connect.NewClient[v1.AuthLoginProviderRequest, v1.AuthLoginProviderResponse](
			httpClient,
			baseURL+DevkitServiceAuthLoginProviderProcedure,
			connect.WithSchema(devkitServiceAuthLoginProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authLoginProviderCallback: connect.NewClient[v1.AuthLoginProviderCallbackRequest, v1.AuthLoginProviderCallbackResponse](
			httpClient,
			baseURL+DevkitServiceAuthLoginProviderCallbackProcedure,
			connect.WithSchema(devkitServiceAuthLoginProviderCallbackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authResetPasswordEmail: connect.NewClient[v1.AuthResetPasswordEmailRequest, v1.AuthResetPasswordEmailResponse](
			httpClient,
			baseURL+DevkitServiceAuthResetPasswordEmailProcedure,
			connect.WithSchema(devkitServiceAuthResetPasswordEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authResetPassword: connect.NewClient[v1.AuthResetPasswordRequest, v1.AuthResetPasswordResponse](
			httpClient,
			baseURL+DevkitServiceAuthResetPasswordProcedure,
			connect.WithSchema(devkitServiceAuthResetPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		partialDeleteRestore: connect.NewClient[v1.PartialDeleteRestoreRequest, v1.PartialDeleteRestoreResponse](
			httpClient,
			baseURL+DevkitServicePartialDeleteRestoreProcedure,
			connect.WithSchema(devkitServicePartialDeleteRestoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		partialCreateUpdate: connect.NewClient[v1.PartialCreateUpdateRequest, v1.PartialCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServicePartialCreateUpdateProcedure,
			connect.WithSchema(devkitServicePartialCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		partialList: connect.NewClient[v1.PartialListRequest, v1.PartialListResponse](
			httpClient,
			baseURL+DevkitServicePartialListProcedure,
			connect.WithSchema(devkitServicePartialListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		pageDeleteRestore: connect.NewClient[v1.PageDeleteRestoreRequest, v1.PageDeleteRestoreResponse](
			httpClient,
			baseURL+DevkitServicePageDeleteRestoreProcedure,
			connect.WithSchema(devkitServicePageDeleteRestoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pageCreateUpdate: connect.NewClient[v1.PageCreateUpdateRequest, v1.PageCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServicePageCreateUpdateProcedure,
			connect.WithSchema(devkitServicePageCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pageList: connect.NewClient[v1.PageListRequest, v1.PageListResponse](
			httpClient,
			baseURL+DevkitServicePageListProcedure,
			connect.WithSchema(devkitServicePageListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		sectionDeleteRestore: connect.NewClient[v1.SectionDeleteRestoreRequest, v1.SectionDeleteRestoreResponse](
			httpClient,
			baseURL+DevkitServiceSectionDeleteRestoreProcedure,
			connect.WithSchema(devkitServiceSectionDeleteRestoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sectionCreateUpdate: connect.NewClient[v1.SectionCreateUpdateRequest, v1.SectionCreateUpdateResponse](
			httpClient,
			baseURL+DevkitServiceSectionCreateUpdateProcedure,
			connect.WithSchema(devkitServiceSectionCreateUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sectionList: connect.NewClient[v1.SectionListRequest, v1.SectionListResponse](
			httpClient,
			baseURL+DevkitServiceSectionListProcedure,
			connect.WithSchema(devkitServiceSectionListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// devkitServiceClient implements DevkitServiceClient.
type devkitServiceClient struct {
	cityListInput               *connect.Client[v1.CityListInputRequest, v1.CityListInputResponse]
	cityList                    *connect.Client[v1.CityListRequest, v1.CityListResponse]
	locationListInput           *connect.Client[v1.LocationListInputRequest, v1.LocationListInputResponse]
	locationList                *connect.Client[v1.LocationListRequest, v1.LocationListResponse]
	tenantDeleteRestore         *connect.Client[v1.TenantDeleteRestoreRequest, v1.TenantDeleteRestoreResponse]
	tenantFind                  *connect.Client[v1.TenantFindRequest, v1.TenantFindResponse]
	tenantList                  *connect.Client[v1.TenantListRequest, v1.TenantListResponse]
	tenantCreateUpdate          *connect.Client[v1.TenantCreateUpdateRequest, v1.TenantCreateUpdateResponse]
	settingFindForUpdate        *connect.Client[v1.SettingFindForUpdateRequest, v1.SettingFindForUpdateResponse]
	settingUpdate               *connect.Client[v1.SettingUpdateRequest, v1.SettingUpdateResponse]
	iconList                    *connect.Client[v1.IconListRequest, v1.IconListResponse]
	iconFind                    *connect.Client[v1.IconFindRequest, v1.IconFindResponse]
	iconCreateUpdateBulk        *connect.Client[v1.IconCreateUpdateBulkRequest, v1.IconCreateUpdateBulkResponse]
	bucketList                  *connect.Client[v1.BucketListRequest, v1.BucketListResponse]
	bucketCreateUpdate          *connect.Client[v1.BucketCreateUpdateRequest, v1.BucketCreateUpdateResponse]
	fileList                    *connect.Client[v1.FileListRequest, v1.FileListResponse]
	fileCreate                  *connect.Client[v1.FileCreateRequest, v1.FileCreateResponse]
	fileCreateBulk              *connect.Client[v1.FileCreateBulkRequest, v1.FileCreateBulkResponse]
	fileDelete                  *connect.Client[v1.FileDeleteRequest, v1.FileDeleteResponse]
	importTable                 *connect.Client[v1.ImportTableRequest, v1.ImportTableResponse]
	emailSend                   *connect.Client[v1.EmailSendRequest, v1.EmailSendResponse]
	translationList             *connect.Client[v1.TranslationListRequest, v1.TranslationListResponse]
	translationFindLocale       *connect.Client[v1.TranslationFindLocaleRequest, v1.TranslationFindLocaleResponse]
	translationCreateUpdateBulk *connect.Client[v1.TranslationCreateUpdateBulkRequest, v1.TranslationCreateUpdateBulkResponse]
	translationDelete           *connect.Client[v1.TranslationDeleteRequest, v1.TranslationDeleteResponse]
	roleList                    *connect.Client[v1.RoleListRequest, v1.RoleListResponse]
	roleListInput               *connect.Client[v1.RoleListInputRequest, v1.RoleListInputResponse]
	roleFindForUpdate           *connect.Client[v1.RoleFindForUpdateRequest, v1.RoleFindForUpdateResponse]
	roleCreateUpdate            *connect.Client[v1.RoleCreateUpdateRequest, v1.RoleCreateUpdateResponse]
	roleDeleteRestore           *connect.Client[v1.RoleDeleteRestoreRequest, v1.RoleDeleteRestoreResponse]
	roleDelete                  *connect.Client[v1.RoleDeleteRequest, v1.RoleDeleteResponse]
	userList                    *connect.Client[v1.UserListRequest, v1.UserListResponse]
	userListInput               *connect.Client[v1.UserListInputRequest, v1.UserListInputResponse]
	userTypeListInput           *connect.Client[v1.UserTypeListInputRequest, v1.UserTypeListInputResponse]
	userFindForUpdate           *connect.Client[v1.UserFindForUpdateRequest, v1.UserFindForUpdateResponse]
	userCreateUpdate            *connect.Client[v1.UserCreateUpdateRequest, v1.UserCreateUpdateResponse]
	userDeleteRestore           *connect.Client[v1.UserDeleteRestoreRequest, v1.UserDeleteRestoreResponse]
	userDelete                  *connect.Client[v1.UserDeleteRequest, v1.UserDeleteResponse]
	authLogin                   *connect.Client[v1.AuthLoginRequest, v1.AuthLoginResponse]
	authRegister                *connect.Client[v1.AuthRegisterRequest, v1.AuthRegisterResponse]
	authInvite                  *connect.Client[v1.AuthInviteRequest, v1.AuthInviteResponse]
	authAuthorize               *connect.Client[v1.AuthAuthorizeRequest, v1.AuthAuthorizeResponse]
	authLoginProvider           *connect.Client[v1.AuthLoginProviderRequest, v1.AuthLoginProviderResponse]
	authLoginProviderCallback   *connect.Client[v1.AuthLoginProviderCallbackRequest, v1.AuthLoginProviderCallbackResponse]
	authResetPasswordEmail      *connect.Client[v1.AuthResetPasswordEmailRequest, v1.AuthResetPasswordEmailResponse]
	authResetPassword           *connect.Client[v1.AuthResetPasswordRequest, v1.AuthResetPasswordResponse]
	partialDeleteRestore        *connect.Client[v1.PartialDeleteRestoreRequest, v1.PartialDeleteRestoreResponse]
	partialCreateUpdate         *connect.Client[v1.PartialCreateUpdateRequest, v1.PartialCreateUpdateResponse]
	partialList                 *connect.Client[v1.PartialListRequest, v1.PartialListResponse]
	pageDeleteRestore           *connect.Client[v1.PageDeleteRestoreRequest, v1.PageDeleteRestoreResponse]
	pageCreateUpdate            *connect.Client[v1.PageCreateUpdateRequest, v1.PageCreateUpdateResponse]
	pageList                    *connect.Client[v1.PageListRequest, v1.PageListResponse]
	sectionDeleteRestore        *connect.Client[v1.SectionDeleteRestoreRequest, v1.SectionDeleteRestoreResponse]
	sectionCreateUpdate         *connect.Client[v1.SectionCreateUpdateRequest, v1.SectionCreateUpdateResponse]
	sectionList                 *connect.Client[v1.SectionListRequest, v1.SectionListResponse]
}

// CityListInput calls devkit.v1.DevkitService.CityListInput.
func (c *devkitServiceClient) CityListInput(ctx context.Context, req *connect.Request[v1.CityListInputRequest]) (*connect.Response[v1.CityListInputResponse], error) {
	return c.cityListInput.CallUnary(ctx, req)
}

// CityList calls devkit.v1.DevkitService.CityList.
func (c *devkitServiceClient) CityList(ctx context.Context, req *connect.Request[v1.CityListRequest]) (*connect.Response[v1.CityListResponse], error) {
	return c.cityList.CallUnary(ctx, req)
}

// LocationListInput calls devkit.v1.DevkitService.LocationListInput.
func (c *devkitServiceClient) LocationListInput(ctx context.Context, req *connect.Request[v1.LocationListInputRequest]) (*connect.Response[v1.LocationListInputResponse], error) {
	return c.locationListInput.CallUnary(ctx, req)
}

// LocationList calls devkit.v1.DevkitService.LocationList.
func (c *devkitServiceClient) LocationList(ctx context.Context, req *connect.Request[v1.LocationListRequest]) (*connect.Response[v1.LocationListResponse], error) {
	return c.locationList.CallUnary(ctx, req)
}

// TenantDeleteRestore calls devkit.v1.DevkitService.TenantDeleteRestore.
func (c *devkitServiceClient) TenantDeleteRestore(ctx context.Context, req *connect.Request[v1.TenantDeleteRestoreRequest]) (*connect.Response[v1.TenantDeleteRestoreResponse], error) {
	return c.tenantDeleteRestore.CallUnary(ctx, req)
}

// TenantFind calls devkit.v1.DevkitService.TenantFind.
func (c *devkitServiceClient) TenantFind(ctx context.Context, req *connect.Request[v1.TenantFindRequest]) (*connect.Response[v1.TenantFindResponse], error) {
	return c.tenantFind.CallUnary(ctx, req)
}

// TenantList calls devkit.v1.DevkitService.TenantList.
func (c *devkitServiceClient) TenantList(ctx context.Context, req *connect.Request[v1.TenantListRequest]) (*connect.Response[v1.TenantListResponse], error) {
	return c.tenantList.CallUnary(ctx, req)
}

// TenantCreateUpdate calls devkit.v1.DevkitService.TenantCreateUpdate.
func (c *devkitServiceClient) TenantCreateUpdate(ctx context.Context, req *connect.Request[v1.TenantCreateUpdateRequest]) (*connect.Response[v1.TenantCreateUpdateResponse], error) {
	return c.tenantCreateUpdate.CallUnary(ctx, req)
}

// SettingFindForUpdate calls devkit.v1.DevkitService.SettingFindForUpdate.
func (c *devkitServiceClient) SettingFindForUpdate(ctx context.Context, req *connect.Request[v1.SettingFindForUpdateRequest]) (*connect.Response[v1.SettingFindForUpdateResponse], error) {
	return c.settingFindForUpdate.CallUnary(ctx, req)
}

// SettingUpdate calls devkit.v1.DevkitService.SettingUpdate.
func (c *devkitServiceClient) SettingUpdate(ctx context.Context, req *connect.Request[v1.SettingUpdateRequest]) (*connect.Response[v1.SettingUpdateResponse], error) {
	return c.settingUpdate.CallUnary(ctx, req)
}

// IconList calls devkit.v1.DevkitService.IconList.
func (c *devkitServiceClient) IconList(ctx context.Context, req *connect.Request[v1.IconListRequest]) (*connect.Response[v1.IconListResponse], error) {
	return c.iconList.CallUnary(ctx, req)
}

// IconFind calls devkit.v1.DevkitService.IconFind.
func (c *devkitServiceClient) IconFind(ctx context.Context, req *connect.Request[v1.IconFindRequest]) (*connect.Response[v1.IconFindResponse], error) {
	return c.iconFind.CallUnary(ctx, req)
}

// IconCreateUpdateBulk calls devkit.v1.DevkitService.IconCreateUpdateBulk.
func (c *devkitServiceClient) IconCreateUpdateBulk(ctx context.Context, req *connect.Request[v1.IconCreateUpdateBulkRequest]) (*connect.Response[v1.IconCreateUpdateBulkResponse], error) {
	return c.iconCreateUpdateBulk.CallUnary(ctx, req)
}

// BucketList calls devkit.v1.DevkitService.BucketList.
func (c *devkitServiceClient) BucketList(ctx context.Context, req *connect.Request[v1.BucketListRequest]) (*connect.Response[v1.BucketListResponse], error) {
	return c.bucketList.CallUnary(ctx, req)
}

// BucketCreateUpdate calls devkit.v1.DevkitService.BucketCreateUpdate.
func (c *devkitServiceClient) BucketCreateUpdate(ctx context.Context, req *connect.Request[v1.BucketCreateUpdateRequest]) (*connect.Response[v1.BucketCreateUpdateResponse], error) {
	return c.bucketCreateUpdate.CallUnary(ctx, req)
}

// FileList calls devkit.v1.DevkitService.FileList.
func (c *devkitServiceClient) FileList(ctx context.Context, req *connect.Request[v1.FileListRequest]) (*connect.Response[v1.FileListResponse], error) {
	return c.fileList.CallUnary(ctx, req)
}

// FileCreate calls devkit.v1.DevkitService.FileCreate.
func (c *devkitServiceClient) FileCreate(ctx context.Context, req *connect.Request[v1.FileCreateRequest]) (*connect.Response[v1.FileCreateResponse], error) {
	return c.fileCreate.CallUnary(ctx, req)
}

// FileCreateBulk calls devkit.v1.DevkitService.FileCreateBulk.
func (c *devkitServiceClient) FileCreateBulk(ctx context.Context, req *connect.Request[v1.FileCreateBulkRequest]) (*connect.Response[v1.FileCreateBulkResponse], error) {
	return c.fileCreateBulk.CallUnary(ctx, req)
}

// FileDelete calls devkit.v1.DevkitService.FileDelete.
func (c *devkitServiceClient) FileDelete(ctx context.Context, req *connect.Request[v1.FileDeleteRequest]) (*connect.Response[v1.FileDeleteResponse], error) {
	return c.fileDelete.CallUnary(ctx, req)
}

// ImportTable calls devkit.v1.DevkitService.ImportTable.
func (c *devkitServiceClient) ImportTable(ctx context.Context, req *connect.Request[v1.ImportTableRequest]) (*connect.Response[v1.ImportTableResponse], error) {
	return c.importTable.CallUnary(ctx, req)
}

// EmailSend calls devkit.v1.DevkitService.EmailSend.
func (c *devkitServiceClient) EmailSend(ctx context.Context, req *connect.Request[v1.EmailSendRequest]) (*connect.Response[v1.EmailSendResponse], error) {
	return c.emailSend.CallUnary(ctx, req)
}

// TranslationList calls devkit.v1.DevkitService.TranslationList.
func (c *devkitServiceClient) TranslationList(ctx context.Context, req *connect.Request[v1.TranslationListRequest]) (*connect.Response[v1.TranslationListResponse], error) {
	return c.translationList.CallUnary(ctx, req)
}

// TranslationFindLocale calls devkit.v1.DevkitService.TranslationFindLocale.
func (c *devkitServiceClient) TranslationFindLocale(ctx context.Context, req *connect.Request[v1.TranslationFindLocaleRequest]) (*connect.Response[v1.TranslationFindLocaleResponse], error) {
	return c.translationFindLocale.CallUnary(ctx, req)
}

// TranslationCreateUpdateBulk calls devkit.v1.DevkitService.TranslationCreateUpdateBulk.
func (c *devkitServiceClient) TranslationCreateUpdateBulk(ctx context.Context, req *connect.Request[v1.TranslationCreateUpdateBulkRequest]) (*connect.Response[v1.TranslationCreateUpdateBulkResponse], error) {
	return c.translationCreateUpdateBulk.CallUnary(ctx, req)
}

// TranslationDelete calls devkit.v1.DevkitService.TranslationDelete.
func (c *devkitServiceClient) TranslationDelete(ctx context.Context, req *connect.Request[v1.TranslationDeleteRequest]) (*connect.Response[v1.TranslationDeleteResponse], error) {
	return c.translationDelete.CallUnary(ctx, req)
}

// RoleList calls devkit.v1.DevkitService.RoleList.
func (c *devkitServiceClient) RoleList(ctx context.Context, req *connect.Request[v1.RoleListRequest]) (*connect.Response[v1.RoleListResponse], error) {
	return c.roleList.CallUnary(ctx, req)
}

// RoleListInput calls devkit.v1.DevkitService.RoleListInput.
func (c *devkitServiceClient) RoleListInput(ctx context.Context, req *connect.Request[v1.RoleListInputRequest]) (*connect.Response[v1.RoleListInputResponse], error) {
	return c.roleListInput.CallUnary(ctx, req)
}

// RoleFindForUpdate calls devkit.v1.DevkitService.RoleFindForUpdate.
func (c *devkitServiceClient) RoleFindForUpdate(ctx context.Context, req *connect.Request[v1.RoleFindForUpdateRequest]) (*connect.Response[v1.RoleFindForUpdateResponse], error) {
	return c.roleFindForUpdate.CallUnary(ctx, req)
}

// RoleCreateUpdate calls devkit.v1.DevkitService.RoleCreateUpdate.
func (c *devkitServiceClient) RoleCreateUpdate(ctx context.Context, req *connect.Request[v1.RoleCreateUpdateRequest]) (*connect.Response[v1.RoleCreateUpdateResponse], error) {
	return c.roleCreateUpdate.CallUnary(ctx, req)
}

// RoleDeleteRestore calls devkit.v1.DevkitService.RoleDeleteRestore.
func (c *devkitServiceClient) RoleDeleteRestore(ctx context.Context, req *connect.Request[v1.RoleDeleteRestoreRequest]) (*connect.Response[v1.RoleDeleteRestoreResponse], error) {
	return c.roleDeleteRestore.CallUnary(ctx, req)
}

// RoleDelete calls devkit.v1.DevkitService.RoleDelete.
func (c *devkitServiceClient) RoleDelete(ctx context.Context, req *connect.Request[v1.RoleDeleteRequest]) (*connect.Response[v1.RoleDeleteResponse], error) {
	return c.roleDelete.CallUnary(ctx, req)
}

// UserList calls devkit.v1.DevkitService.UserList.
func (c *devkitServiceClient) UserList(ctx context.Context, req *connect.Request[v1.UserListRequest]) (*connect.Response[v1.UserListResponse], error) {
	return c.userList.CallUnary(ctx, req)
}

// UserListInput calls devkit.v1.DevkitService.UserListInput.
func (c *devkitServiceClient) UserListInput(ctx context.Context, req *connect.Request[v1.UserListInputRequest]) (*connect.Response[v1.UserListInputResponse], error) {
	return c.userListInput.CallUnary(ctx, req)
}

// UserTypeListInput calls devkit.v1.DevkitService.UserTypeListInput.
func (c *devkitServiceClient) UserTypeListInput(ctx context.Context, req *connect.Request[v1.UserTypeListInputRequest]) (*connect.Response[v1.UserTypeListInputResponse], error) {
	return c.userTypeListInput.CallUnary(ctx, req)
}

// UserFindForUpdate calls devkit.v1.DevkitService.UserFindForUpdate.
func (c *devkitServiceClient) UserFindForUpdate(ctx context.Context, req *connect.Request[v1.UserFindForUpdateRequest]) (*connect.Response[v1.UserFindForUpdateResponse], error) {
	return c.userFindForUpdate.CallUnary(ctx, req)
}

// UserCreateUpdate calls devkit.v1.DevkitService.UserCreateUpdate.
func (c *devkitServiceClient) UserCreateUpdate(ctx context.Context, req *connect.Request[v1.UserCreateUpdateRequest]) (*connect.Response[v1.UserCreateUpdateResponse], error) {
	return c.userCreateUpdate.CallUnary(ctx, req)
}

// UserDeleteRestore calls devkit.v1.DevkitService.UserDeleteRestore.
func (c *devkitServiceClient) UserDeleteRestore(ctx context.Context, req *connect.Request[v1.UserDeleteRestoreRequest]) (*connect.Response[v1.UserDeleteRestoreResponse], error) {
	return c.userDeleteRestore.CallUnary(ctx, req)
}

// UserDelete calls devkit.v1.DevkitService.UserDelete.
func (c *devkitServiceClient) UserDelete(ctx context.Context, req *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error) {
	return c.userDelete.CallUnary(ctx, req)
}

// AuthLogin calls devkit.v1.DevkitService.AuthLogin.
func (c *devkitServiceClient) AuthLogin(ctx context.Context, req *connect.Request[v1.AuthLoginRequest]) (*connect.Response[v1.AuthLoginResponse], error) {
	return c.authLogin.CallUnary(ctx, req)
}

// AuthRegister calls devkit.v1.DevkitService.AuthRegister.
func (c *devkitServiceClient) AuthRegister(ctx context.Context, req *connect.Request[v1.AuthRegisterRequest]) (*connect.Response[v1.AuthRegisterResponse], error) {
	return c.authRegister.CallUnary(ctx, req)
}

// AuthInvite calls devkit.v1.DevkitService.AuthInvite.
func (c *devkitServiceClient) AuthInvite(ctx context.Context, req *connect.Request[v1.AuthInviteRequest]) (*connect.Response[v1.AuthInviteResponse], error) {
	return c.authInvite.CallUnary(ctx, req)
}

// AuthAuthorize calls devkit.v1.DevkitService.AuthAuthorize.
func (c *devkitServiceClient) AuthAuthorize(ctx context.Context, req *connect.Request[v1.AuthAuthorizeRequest]) (*connect.Response[v1.AuthAuthorizeResponse], error) {
	return c.authAuthorize.CallUnary(ctx, req)
}

// AuthLoginProvider calls devkit.v1.DevkitService.AuthLoginProvider.
func (c *devkitServiceClient) AuthLoginProvider(ctx context.Context, req *connect.Request[v1.AuthLoginProviderRequest]) (*connect.Response[v1.AuthLoginProviderResponse], error) {
	return c.authLoginProvider.CallUnary(ctx, req)
}

// AuthLoginProviderCallback calls devkit.v1.DevkitService.AuthLoginProviderCallback.
func (c *devkitServiceClient) AuthLoginProviderCallback(ctx context.Context, req *connect.Request[v1.AuthLoginProviderCallbackRequest]) (*connect.Response[v1.AuthLoginProviderCallbackResponse], error) {
	return c.authLoginProviderCallback.CallUnary(ctx, req)
}

// AuthResetPasswordEmail calls devkit.v1.DevkitService.AuthResetPasswordEmail.
func (c *devkitServiceClient) AuthResetPasswordEmail(ctx context.Context, req *connect.Request[v1.AuthResetPasswordEmailRequest]) (*connect.Response[v1.AuthResetPasswordEmailResponse], error) {
	return c.authResetPasswordEmail.CallUnary(ctx, req)
}

// AuthResetPassword calls devkit.v1.DevkitService.AuthResetPassword.
func (c *devkitServiceClient) AuthResetPassword(ctx context.Context, req *connect.Request[v1.AuthResetPasswordRequest]) (*connect.Response[v1.AuthResetPasswordResponse], error) {
	return c.authResetPassword.CallUnary(ctx, req)
}

// PartialDeleteRestore calls devkit.v1.DevkitService.PartialDeleteRestore.
func (c *devkitServiceClient) PartialDeleteRestore(ctx context.Context, req *connect.Request[v1.PartialDeleteRestoreRequest]) (*connect.Response[v1.PartialDeleteRestoreResponse], error) {
	return c.partialDeleteRestore.CallUnary(ctx, req)
}

// PartialCreateUpdate calls devkit.v1.DevkitService.PartialCreateUpdate.
func (c *devkitServiceClient) PartialCreateUpdate(ctx context.Context, req *connect.Request[v1.PartialCreateUpdateRequest]) (*connect.Response[v1.PartialCreateUpdateResponse], error) {
	return c.partialCreateUpdate.CallUnary(ctx, req)
}

// PartialList calls devkit.v1.DevkitService.PartialList.
func (c *devkitServiceClient) PartialList(ctx context.Context, req *connect.Request[v1.PartialListRequest]) (*connect.Response[v1.PartialListResponse], error) {
	return c.partialList.CallUnary(ctx, req)
}

// PageDeleteRestore calls devkit.v1.DevkitService.PageDeleteRestore.
func (c *devkitServiceClient) PageDeleteRestore(ctx context.Context, req *connect.Request[v1.PageDeleteRestoreRequest]) (*connect.Response[v1.PageDeleteRestoreResponse], error) {
	return c.pageDeleteRestore.CallUnary(ctx, req)
}

// PageCreateUpdate calls devkit.v1.DevkitService.PageCreateUpdate.
func (c *devkitServiceClient) PageCreateUpdate(ctx context.Context, req *connect.Request[v1.PageCreateUpdateRequest]) (*connect.Response[v1.PageCreateUpdateResponse], error) {
	return c.pageCreateUpdate.CallUnary(ctx, req)
}

// PageList calls devkit.v1.DevkitService.PageList.
func (c *devkitServiceClient) PageList(ctx context.Context, req *connect.Request[v1.PageListRequest]) (*connect.Response[v1.PageListResponse], error) {
	return c.pageList.CallUnary(ctx, req)
}

// SectionDeleteRestore calls devkit.v1.DevkitService.SectionDeleteRestore.
func (c *devkitServiceClient) SectionDeleteRestore(ctx context.Context, req *connect.Request[v1.SectionDeleteRestoreRequest]) (*connect.Response[v1.SectionDeleteRestoreResponse], error) {
	return c.sectionDeleteRestore.CallUnary(ctx, req)
}

// SectionCreateUpdate calls devkit.v1.DevkitService.SectionCreateUpdate.
func (c *devkitServiceClient) SectionCreateUpdate(ctx context.Context, req *connect.Request[v1.SectionCreateUpdateRequest]) (*connect.Response[v1.SectionCreateUpdateResponse], error) {
	return c.sectionCreateUpdate.CallUnary(ctx, req)
}

// SectionList calls devkit.v1.DevkitService.SectionList.
func (c *devkitServiceClient) SectionList(ctx context.Context, req *connect.Request[v1.SectionListRequest]) (*connect.Response[v1.SectionListResponse], error) {
	return c.sectionList.CallUnary(ctx, req)
}

// DevkitServiceHandler is an implementation of the devkit.v1.DevkitService service.
type DevkitServiceHandler interface {
	// INJECT METHODS
	CityListInput(context.Context, *connect.Request[v1.CityListInputRequest]) (*connect.Response[v1.CityListInputResponse], error)
	CityList(context.Context, *connect.Request[v1.CityListRequest]) (*connect.Response[v1.CityListResponse], error)
	LocationListInput(context.Context, *connect.Request[v1.LocationListInputRequest]) (*connect.Response[v1.LocationListInputResponse], error)
	LocationList(context.Context, *connect.Request[v1.LocationListRequest]) (*connect.Response[v1.LocationListResponse], error)
	TenantDeleteRestore(context.Context, *connect.Request[v1.TenantDeleteRestoreRequest]) (*connect.Response[v1.TenantDeleteRestoreResponse], error)
	TenantFind(context.Context, *connect.Request[v1.TenantFindRequest]) (*connect.Response[v1.TenantFindResponse], error)
	TenantList(context.Context, *connect.Request[v1.TenantListRequest]) (*connect.Response[v1.TenantListResponse], error)
	TenantCreateUpdate(context.Context, *connect.Request[v1.TenantCreateUpdateRequest]) (*connect.Response[v1.TenantCreateUpdateResponse], error)
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// public
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// settings
	SettingFindForUpdate(context.Context, *connect.Request[v1.SettingFindForUpdateRequest]) (*connect.Response[v1.SettingFindForUpdateResponse], error)
	SettingUpdate(context.Context, *connect.Request[v1.SettingUpdateRequest]) (*connect.Response[v1.SettingUpdateResponse], error)
	// icons
	IconList(context.Context, *connect.Request[v1.IconListRequest]) (*connect.Response[v1.IconListResponse], error)
	IconFind(context.Context, *connect.Request[v1.IconFindRequest]) (*connect.Response[v1.IconFindResponse], error)
	IconCreateUpdateBulk(context.Context, *connect.Request[v1.IconCreateUpdateBulkRequest]) (*connect.Response[v1.IconCreateUpdateBulkResponse], error)
	// TODO: icon delete
	// buckets
	BucketList(context.Context, *connect.Request[v1.BucketListRequest]) (*connect.Response[v1.BucketListResponse], error)
	BucketCreateUpdate(context.Context, *connect.Request[v1.BucketCreateUpdateRequest]) (*connect.Response[v1.BucketCreateUpdateResponse], error)
	// files
	FileList(context.Context, *connect.Request[v1.FileListRequest]) (*connect.Response[v1.FileListResponse], error)
	FileCreate(context.Context, *connect.Request[v1.FileCreateRequest]) (*connect.Response[v1.FileCreateResponse], error)
	FileCreateBulk(context.Context, *connect.Request[v1.FileCreateBulkRequest]) (*connect.Response[v1.FileCreateBulkResponse], error)
	// rpc FileDeleteRestore(FileDeleteRestoreRequest) returns (FileDeleteRestoreResponse) {}
	FileDelete(context.Context, *connect.Request[v1.FileDeleteRequest]) (*connect.Response[v1.FileDeleteResponse], error)
	// import
	ImportTable(context.Context, *connect.Request[v1.ImportTableRequest]) (*connect.Response[v1.ImportTableResponse], error)
	// emails
	EmailSend(context.Context, *connect.Request[v1.EmailSendRequest]) (*connect.Response[v1.EmailSendResponse], error)
	// translations
	TranslationList(context.Context, *connect.Request[v1.TranslationListRequest]) (*connect.Response[v1.TranslationListResponse], error)
	TranslationFindLocale(context.Context, *connect.Request[v1.TranslationFindLocaleRequest]) (*connect.Response[v1.TranslationFindLocaleResponse], error)
	TranslationCreateUpdateBulk(context.Context, *connect.Request[v1.TranslationCreateUpdateBulkRequest]) (*connect.Response[v1.TranslationCreateUpdateBulkResponse], error)
	TranslationDelete(context.Context, *connect.Request[v1.TranslationDeleteRequest]) (*connect.Response[v1.TranslationDeleteResponse], error)
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// accounts
	// ////////////////////////////////////////////////////////////////////////////////////////////
	// roles
	// *******************************************************************************************//
	RoleList(context.Context, *connect.Request[v1.RoleListRequest]) (*connect.Response[v1.RoleListResponse], error)
	RoleListInput(context.Context, *connect.Request[v1.RoleListInputRequest]) (*connect.Response[v1.RoleListInputResponse], error)
	RoleFindForUpdate(context.Context, *connect.Request[v1.RoleFindForUpdateRequest]) (*connect.Response[v1.RoleFindForUpdateResponse], error)
	RoleCreateUpdate(context.Context, *connect.Request[v1.RoleCreateUpdateRequest]) (*connect.Response[v1.RoleCreateUpdateResponse], error)
	RoleDeleteRestore(context.Context, *connect.Request[v1.RoleDeleteRestoreRequest]) (*connect.Response[v1.RoleDeleteRestoreResponse], error)
	RoleDelete(context.Context, *connect.Request[v1.RoleDeleteRequest]) (*connect.Response[v1.RoleDeleteResponse], error)
	// *******************************************************************************************//
	// users
	// *******************************************************************************************//
	UserList(context.Context, *connect.Request[v1.UserListRequest]) (*connect.Response[v1.UserListResponse], error)
	UserListInput(context.Context, *connect.Request[v1.UserListInputRequest]) (*connect.Response[v1.UserListInputResponse], error)
	UserTypeListInput(context.Context, *connect.Request[v1.UserTypeListInputRequest]) (*connect.Response[v1.UserTypeListInputResponse], error)
	UserFindForUpdate(context.Context, *connect.Request[v1.UserFindForUpdateRequest]) (*connect.Response[v1.UserFindForUpdateResponse], error)
	UserCreateUpdate(context.Context, *connect.Request[v1.UserCreateUpdateRequest]) (*connect.Response[v1.UserCreateUpdateResponse], error)
	UserDeleteRestore(context.Context, *connect.Request[v1.UserDeleteRestoreRequest]) (*connect.Response[v1.UserDeleteRestoreResponse], error)
	UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error)
	// *******************************************************************************************//
	// auth
	// *******************************************************************************************//
	AuthLogin(context.Context, *connect.Request[v1.AuthLoginRequest]) (*connect.Response[v1.AuthLoginResponse], error)
	AuthRegister(context.Context, *connect.Request[v1.AuthRegisterRequest]) (*connect.Response[v1.AuthRegisterResponse], error)
	AuthInvite(context.Context, *connect.Request[v1.AuthInviteRequest]) (*connect.Response[v1.AuthInviteResponse], error)
	AuthAuthorize(context.Context, *connect.Request[v1.AuthAuthorizeRequest]) (*connect.Response[v1.AuthAuthorizeResponse], error)
	AuthLoginProvider(context.Context, *connect.Request[v1.AuthLoginProviderRequest]) (*connect.Response[v1.AuthLoginProviderResponse], error)
	AuthLoginProviderCallback(context.Context, *connect.Request[v1.AuthLoginProviderCallbackRequest]) (*connect.Response[v1.AuthLoginProviderCallbackResponse], error)
	AuthResetPasswordEmail(context.Context, *connect.Request[v1.AuthResetPasswordEmailRequest]) (*connect.Response[v1.AuthResetPasswordEmailResponse], error)
	AuthResetPassword(context.Context, *connect.Request[v1.AuthResetPasswordRequest]) (*connect.Response[v1.AuthResetPasswordResponse], error)
	PartialDeleteRestore(context.Context, *connect.Request[v1.PartialDeleteRestoreRequest]) (*connect.Response[v1.PartialDeleteRestoreResponse], error)
	PartialCreateUpdate(context.Context, *connect.Request[v1.PartialCreateUpdateRequest]) (*connect.Response[v1.PartialCreateUpdateResponse], error)
	PartialList(context.Context, *connect.Request[v1.PartialListRequest]) (*connect.Response[v1.PartialListResponse], error)
	PageDeleteRestore(context.Context, *connect.Request[v1.PageDeleteRestoreRequest]) (*connect.Response[v1.PageDeleteRestoreResponse], error)
	PageCreateUpdate(context.Context, *connect.Request[v1.PageCreateUpdateRequest]) (*connect.Response[v1.PageCreateUpdateResponse], error)
	PageList(context.Context, *connect.Request[v1.PageListRequest]) (*connect.Response[v1.PageListResponse], error)
	SectionDeleteRestore(context.Context, *connect.Request[v1.SectionDeleteRestoreRequest]) (*connect.Response[v1.SectionDeleteRestoreResponse], error)
	SectionCreateUpdate(context.Context, *connect.Request[v1.SectionCreateUpdateRequest]) (*connect.Response[v1.SectionCreateUpdateResponse], error)
	SectionList(context.Context, *connect.Request[v1.SectionListRequest]) (*connect.Response[v1.SectionListResponse], error)
}

// NewDevkitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDevkitServiceHandler(svc DevkitServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	devkitServiceCityListInputHandler := connect.NewUnaryHandler(
		DevkitServiceCityListInputProcedure,
		svc.CityListInput,
		connect.WithSchema(devkitServiceCityListInputMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceCityListHandler := connect.NewUnaryHandler(
		DevkitServiceCityListProcedure,
		svc.CityList,
		connect.WithSchema(devkitServiceCityListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceLocationListInputHandler := connect.NewUnaryHandler(
		DevkitServiceLocationListInputProcedure,
		svc.LocationListInput,
		connect.WithSchema(devkitServiceLocationListInputMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceLocationListHandler := connect.NewUnaryHandler(
		DevkitServiceLocationListProcedure,
		svc.LocationList,
		connect.WithSchema(devkitServiceLocationListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTenantDeleteRestoreHandler := connect.NewUnaryHandler(
		DevkitServiceTenantDeleteRestoreProcedure,
		svc.TenantDeleteRestore,
		connect.WithSchema(devkitServiceTenantDeleteRestoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTenantFindHandler := connect.NewUnaryHandler(
		DevkitServiceTenantFindProcedure,
		svc.TenantFind,
		connect.WithSchema(devkitServiceTenantFindMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTenantListHandler := connect.NewUnaryHandler(
		DevkitServiceTenantListProcedure,
		svc.TenantList,
		connect.WithSchema(devkitServiceTenantListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTenantCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceTenantCreateUpdateProcedure,
		svc.TenantCreateUpdate,
		connect.WithSchema(devkitServiceTenantCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceSettingFindForUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceSettingFindForUpdateProcedure,
		svc.SettingFindForUpdate,
		connect.WithSchema(devkitServiceSettingFindForUpdateMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceSettingUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceSettingUpdateProcedure,
		svc.SettingUpdate,
		connect.WithSchema(devkitServiceSettingUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceIconListHandler := connect.NewUnaryHandler(
		DevkitServiceIconListProcedure,
		svc.IconList,
		connect.WithSchema(devkitServiceIconListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceIconFindHandler := connect.NewUnaryHandler(
		DevkitServiceIconFindProcedure,
		svc.IconFind,
		connect.WithSchema(devkitServiceIconFindMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceIconCreateUpdateBulkHandler := connect.NewUnaryHandler(
		DevkitServiceIconCreateUpdateBulkProcedure,
		svc.IconCreateUpdateBulk,
		connect.WithSchema(devkitServiceIconCreateUpdateBulkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceBucketListHandler := connect.NewUnaryHandler(
		DevkitServiceBucketListProcedure,
		svc.BucketList,
		connect.WithSchema(devkitServiceBucketListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceBucketCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceBucketCreateUpdateProcedure,
		svc.BucketCreateUpdate,
		connect.WithSchema(devkitServiceBucketCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceFileListHandler := connect.NewUnaryHandler(
		DevkitServiceFileListProcedure,
		svc.FileList,
		connect.WithSchema(devkitServiceFileListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceFileCreateHandler := connect.NewUnaryHandler(
		DevkitServiceFileCreateProcedure,
		svc.FileCreate,
		connect.WithSchema(devkitServiceFileCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceFileCreateBulkHandler := connect.NewUnaryHandler(
		DevkitServiceFileCreateBulkProcedure,
		svc.FileCreateBulk,
		connect.WithSchema(devkitServiceFileCreateBulkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceFileDeleteHandler := connect.NewUnaryHandler(
		DevkitServiceFileDeleteProcedure,
		svc.FileDelete,
		connect.WithSchema(devkitServiceFileDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceImportTableHandler := connect.NewUnaryHandler(
		DevkitServiceImportTableProcedure,
		svc.ImportTable,
		connect.WithSchema(devkitServiceImportTableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceEmailSendHandler := connect.NewUnaryHandler(
		DevkitServiceEmailSendProcedure,
		svc.EmailSend,
		connect.WithSchema(devkitServiceEmailSendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTranslationListHandler := connect.NewUnaryHandler(
		DevkitServiceTranslationListProcedure,
		svc.TranslationList,
		connect.WithSchema(devkitServiceTranslationListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTranslationFindLocaleHandler := connect.NewUnaryHandler(
		DevkitServiceTranslationFindLocaleProcedure,
		svc.TranslationFindLocale,
		connect.WithSchema(devkitServiceTranslationFindLocaleMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTranslationCreateUpdateBulkHandler := connect.NewUnaryHandler(
		DevkitServiceTranslationCreateUpdateBulkProcedure,
		svc.TranslationCreateUpdateBulk,
		connect.WithSchema(devkitServiceTranslationCreateUpdateBulkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceTranslationDeleteHandler := connect.NewUnaryHandler(
		DevkitServiceTranslationDeleteProcedure,
		svc.TranslationDelete,
		connect.WithSchema(devkitServiceTranslationDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceRoleListHandler := connect.NewUnaryHandler(
		DevkitServiceRoleListProcedure,
		svc.RoleList,
		connect.WithSchema(devkitServiceRoleListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceRoleListInputHandler := connect.NewUnaryHandler(
		DevkitServiceRoleListInputProcedure,
		svc.RoleListInput,
		connect.WithSchema(devkitServiceRoleListInputMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceRoleFindForUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceRoleFindForUpdateProcedure,
		svc.RoleFindForUpdate,
		connect.WithSchema(devkitServiceRoleFindForUpdateMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceRoleCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceRoleCreateUpdateProcedure,
		svc.RoleCreateUpdate,
		connect.WithSchema(devkitServiceRoleCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceRoleDeleteRestoreHandler := connect.NewUnaryHandler(
		DevkitServiceRoleDeleteRestoreProcedure,
		svc.RoleDeleteRestore,
		connect.WithSchema(devkitServiceRoleDeleteRestoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceRoleDeleteHandler := connect.NewUnaryHandler(
		DevkitServiceRoleDeleteProcedure,
		svc.RoleDelete,
		connect.WithSchema(devkitServiceRoleDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserListHandler := connect.NewUnaryHandler(
		DevkitServiceUserListProcedure,
		svc.UserList,
		connect.WithSchema(devkitServiceUserListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserListInputHandler := connect.NewUnaryHandler(
		DevkitServiceUserListInputProcedure,
		svc.UserListInput,
		connect.WithSchema(devkitServiceUserListInputMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserTypeListInputHandler := connect.NewUnaryHandler(
		DevkitServiceUserTypeListInputProcedure,
		svc.UserTypeListInput,
		connect.WithSchema(devkitServiceUserTypeListInputMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserFindForUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceUserFindForUpdateProcedure,
		svc.UserFindForUpdate,
		connect.WithSchema(devkitServiceUserFindForUpdateMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceUserCreateUpdateProcedure,
		svc.UserCreateUpdate,
		connect.WithSchema(devkitServiceUserCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserDeleteRestoreHandler := connect.NewUnaryHandler(
		DevkitServiceUserDeleteRestoreProcedure,
		svc.UserDeleteRestore,
		connect.WithSchema(devkitServiceUserDeleteRestoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceUserDeleteHandler := connect.NewUnaryHandler(
		DevkitServiceUserDeleteProcedure,
		svc.UserDelete,
		connect.WithSchema(devkitServiceUserDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceAuthLoginHandler := connect.NewUnaryHandler(
		DevkitServiceAuthLoginProcedure,
		svc.AuthLogin,
		connect.WithSchema(devkitServiceAuthLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceAuthRegisterHandler := connect.NewUnaryHandler(
		DevkitServiceAuthRegisterProcedure,
		svc.AuthRegister,
		connect.WithSchema(devkitServiceAuthRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceAuthInviteHandler := connect.NewUnaryHandler(
		DevkitServiceAuthInviteProcedure,
		svc.AuthInvite,
		connect.WithSchema(devkitServiceAuthInviteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceAuthAuthorizeHandler := connect.NewUnaryHandler(
		DevkitServiceAuthAuthorizeProcedure,
		svc.AuthAuthorize,
		connect.WithSchema(devkitServiceAuthAuthorizeMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceAuthLoginProviderHandler := connect.NewUnaryHandler(
		DevkitServiceAuthLoginProviderProcedure,
		svc.AuthLoginProvider,
		connect.WithSchema(devkitServiceAuthLoginProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceAuthLoginProviderCallbackHandler := connect.NewUnaryHandler(
		DevkitServiceAuthLoginProviderCallbackProcedure,
		svc.AuthLoginProviderCallback,
		connect.WithSchema(devkitServiceAuthLoginProviderCallbackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceAuthResetPasswordEmailHandler := connect.NewUnaryHandler(
		DevkitServiceAuthResetPasswordEmailProcedure,
		svc.AuthResetPasswordEmail,
		connect.WithSchema(devkitServiceAuthResetPasswordEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceAuthResetPasswordHandler := connect.NewUnaryHandler(
		DevkitServiceAuthResetPasswordProcedure,
		svc.AuthResetPassword,
		connect.WithSchema(devkitServiceAuthResetPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServicePartialDeleteRestoreHandler := connect.NewUnaryHandler(
		DevkitServicePartialDeleteRestoreProcedure,
		svc.PartialDeleteRestore,
		connect.WithSchema(devkitServicePartialDeleteRestoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServicePartialCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServicePartialCreateUpdateProcedure,
		svc.PartialCreateUpdate,
		connect.WithSchema(devkitServicePartialCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServicePartialListHandler := connect.NewUnaryHandler(
		DevkitServicePartialListProcedure,
		svc.PartialList,
		connect.WithSchema(devkitServicePartialListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServicePageDeleteRestoreHandler := connect.NewUnaryHandler(
		DevkitServicePageDeleteRestoreProcedure,
		svc.PageDeleteRestore,
		connect.WithSchema(devkitServicePageDeleteRestoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServicePageCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServicePageCreateUpdateProcedure,
		svc.PageCreateUpdate,
		connect.WithSchema(devkitServicePageCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServicePageListHandler := connect.NewUnaryHandler(
		DevkitServicePageListProcedure,
		svc.PageList,
		connect.WithSchema(devkitServicePageListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceSectionDeleteRestoreHandler := connect.NewUnaryHandler(
		DevkitServiceSectionDeleteRestoreProcedure,
		svc.SectionDeleteRestore,
		connect.WithSchema(devkitServiceSectionDeleteRestoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceSectionCreateUpdateHandler := connect.NewUnaryHandler(
		DevkitServiceSectionCreateUpdateProcedure,
		svc.SectionCreateUpdate,
		connect.WithSchema(devkitServiceSectionCreateUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	devkitServiceSectionListHandler := connect.NewUnaryHandler(
		DevkitServiceSectionListProcedure,
		svc.SectionList,
		connect.WithSchema(devkitServiceSectionListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/devkit.v1.DevkitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DevkitServiceCityListInputProcedure:
			devkitServiceCityListInputHandler.ServeHTTP(w, r)
		case DevkitServiceCityListProcedure:
			devkitServiceCityListHandler.ServeHTTP(w, r)
		case DevkitServiceLocationListInputProcedure:
			devkitServiceLocationListInputHandler.ServeHTTP(w, r)
		case DevkitServiceLocationListProcedure:
			devkitServiceLocationListHandler.ServeHTTP(w, r)
		case DevkitServiceTenantDeleteRestoreProcedure:
			devkitServiceTenantDeleteRestoreHandler.ServeHTTP(w, r)
		case DevkitServiceTenantFindProcedure:
			devkitServiceTenantFindHandler.ServeHTTP(w, r)
		case DevkitServiceTenantListProcedure:
			devkitServiceTenantListHandler.ServeHTTP(w, r)
		case DevkitServiceTenantCreateUpdateProcedure:
			devkitServiceTenantCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceSettingFindForUpdateProcedure:
			devkitServiceSettingFindForUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceSettingUpdateProcedure:
			devkitServiceSettingUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceIconListProcedure:
			devkitServiceIconListHandler.ServeHTTP(w, r)
		case DevkitServiceIconFindProcedure:
			devkitServiceIconFindHandler.ServeHTTP(w, r)
		case DevkitServiceIconCreateUpdateBulkProcedure:
			devkitServiceIconCreateUpdateBulkHandler.ServeHTTP(w, r)
		case DevkitServiceBucketListProcedure:
			devkitServiceBucketListHandler.ServeHTTP(w, r)
		case DevkitServiceBucketCreateUpdateProcedure:
			devkitServiceBucketCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceFileListProcedure:
			devkitServiceFileListHandler.ServeHTTP(w, r)
		case DevkitServiceFileCreateProcedure:
			devkitServiceFileCreateHandler.ServeHTTP(w, r)
		case DevkitServiceFileCreateBulkProcedure:
			devkitServiceFileCreateBulkHandler.ServeHTTP(w, r)
		case DevkitServiceFileDeleteProcedure:
			devkitServiceFileDeleteHandler.ServeHTTP(w, r)
		case DevkitServiceImportTableProcedure:
			devkitServiceImportTableHandler.ServeHTTP(w, r)
		case DevkitServiceEmailSendProcedure:
			devkitServiceEmailSendHandler.ServeHTTP(w, r)
		case DevkitServiceTranslationListProcedure:
			devkitServiceTranslationListHandler.ServeHTTP(w, r)
		case DevkitServiceTranslationFindLocaleProcedure:
			devkitServiceTranslationFindLocaleHandler.ServeHTTP(w, r)
		case DevkitServiceTranslationCreateUpdateBulkProcedure:
			devkitServiceTranslationCreateUpdateBulkHandler.ServeHTTP(w, r)
		case DevkitServiceTranslationDeleteProcedure:
			devkitServiceTranslationDeleteHandler.ServeHTTP(w, r)
		case DevkitServiceRoleListProcedure:
			devkitServiceRoleListHandler.ServeHTTP(w, r)
		case DevkitServiceRoleListInputProcedure:
			devkitServiceRoleListInputHandler.ServeHTTP(w, r)
		case DevkitServiceRoleFindForUpdateProcedure:
			devkitServiceRoleFindForUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceRoleCreateUpdateProcedure:
			devkitServiceRoleCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceRoleDeleteRestoreProcedure:
			devkitServiceRoleDeleteRestoreHandler.ServeHTTP(w, r)
		case DevkitServiceRoleDeleteProcedure:
			devkitServiceRoleDeleteHandler.ServeHTTP(w, r)
		case DevkitServiceUserListProcedure:
			devkitServiceUserListHandler.ServeHTTP(w, r)
		case DevkitServiceUserListInputProcedure:
			devkitServiceUserListInputHandler.ServeHTTP(w, r)
		case DevkitServiceUserTypeListInputProcedure:
			devkitServiceUserTypeListInputHandler.ServeHTTP(w, r)
		case DevkitServiceUserFindForUpdateProcedure:
			devkitServiceUserFindForUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceUserCreateUpdateProcedure:
			devkitServiceUserCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceUserDeleteRestoreProcedure:
			devkitServiceUserDeleteRestoreHandler.ServeHTTP(w, r)
		case DevkitServiceUserDeleteProcedure:
			devkitServiceUserDeleteHandler.ServeHTTP(w, r)
		case DevkitServiceAuthLoginProcedure:
			devkitServiceAuthLoginHandler.ServeHTTP(w, r)
		case DevkitServiceAuthRegisterProcedure:
			devkitServiceAuthRegisterHandler.ServeHTTP(w, r)
		case DevkitServiceAuthInviteProcedure:
			devkitServiceAuthInviteHandler.ServeHTTP(w, r)
		case DevkitServiceAuthAuthorizeProcedure:
			devkitServiceAuthAuthorizeHandler.ServeHTTP(w, r)
		case DevkitServiceAuthLoginProviderProcedure:
			devkitServiceAuthLoginProviderHandler.ServeHTTP(w, r)
		case DevkitServiceAuthLoginProviderCallbackProcedure:
			devkitServiceAuthLoginProviderCallbackHandler.ServeHTTP(w, r)
		case DevkitServiceAuthResetPasswordEmailProcedure:
			devkitServiceAuthResetPasswordEmailHandler.ServeHTTP(w, r)
		case DevkitServiceAuthResetPasswordProcedure:
			devkitServiceAuthResetPasswordHandler.ServeHTTP(w, r)
		case DevkitServicePartialDeleteRestoreProcedure:
			devkitServicePartialDeleteRestoreHandler.ServeHTTP(w, r)
		case DevkitServicePartialCreateUpdateProcedure:
			devkitServicePartialCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServicePartialListProcedure:
			devkitServicePartialListHandler.ServeHTTP(w, r)
		case DevkitServicePageDeleteRestoreProcedure:
			devkitServicePageDeleteRestoreHandler.ServeHTTP(w, r)
		case DevkitServicePageCreateUpdateProcedure:
			devkitServicePageCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServicePageListProcedure:
			devkitServicePageListHandler.ServeHTTP(w, r)
		case DevkitServiceSectionDeleteRestoreProcedure:
			devkitServiceSectionDeleteRestoreHandler.ServeHTTP(w, r)
		case DevkitServiceSectionCreateUpdateProcedure:
			devkitServiceSectionCreateUpdateHandler.ServeHTTP(w, r)
		case DevkitServiceSectionListProcedure:
			devkitServiceSectionListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDevkitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDevkitServiceHandler struct{}

func (UnimplementedDevkitServiceHandler) CityListInput(context.Context, *connect.Request[v1.CityListInputRequest]) (*connect.Response[v1.CityListInputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.CityListInput is not implemented"))
}

func (UnimplementedDevkitServiceHandler) CityList(context.Context, *connect.Request[v1.CityListRequest]) (*connect.Response[v1.CityListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.CityList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) LocationListInput(context.Context, *connect.Request[v1.LocationListInputRequest]) (*connect.Response[v1.LocationListInputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.LocationListInput is not implemented"))
}

func (UnimplementedDevkitServiceHandler) LocationList(context.Context, *connect.Request[v1.LocationListRequest]) (*connect.Response[v1.LocationListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.LocationList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TenantDeleteRestore(context.Context, *connect.Request[v1.TenantDeleteRestoreRequest]) (*connect.Response[v1.TenantDeleteRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TenantDeleteRestore is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TenantFind(context.Context, *connect.Request[v1.TenantFindRequest]) (*connect.Response[v1.TenantFindResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TenantFind is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TenantList(context.Context, *connect.Request[v1.TenantListRequest]) (*connect.Response[v1.TenantListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TenantList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TenantCreateUpdate(context.Context, *connect.Request[v1.TenantCreateUpdateRequest]) (*connect.Response[v1.TenantCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TenantCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) SettingFindForUpdate(context.Context, *connect.Request[v1.SettingFindForUpdateRequest]) (*connect.Response[v1.SettingFindForUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.SettingFindForUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) SettingUpdate(context.Context, *connect.Request[v1.SettingUpdateRequest]) (*connect.Response[v1.SettingUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.SettingUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) IconList(context.Context, *connect.Request[v1.IconListRequest]) (*connect.Response[v1.IconListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.IconList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) IconFind(context.Context, *connect.Request[v1.IconFindRequest]) (*connect.Response[v1.IconFindResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.IconFind is not implemented"))
}

func (UnimplementedDevkitServiceHandler) IconCreateUpdateBulk(context.Context, *connect.Request[v1.IconCreateUpdateBulkRequest]) (*connect.Response[v1.IconCreateUpdateBulkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.IconCreateUpdateBulk is not implemented"))
}

func (UnimplementedDevkitServiceHandler) BucketList(context.Context, *connect.Request[v1.BucketListRequest]) (*connect.Response[v1.BucketListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.BucketList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) BucketCreateUpdate(context.Context, *connect.Request[v1.BucketCreateUpdateRequest]) (*connect.Response[v1.BucketCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.BucketCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) FileList(context.Context, *connect.Request[v1.FileListRequest]) (*connect.Response[v1.FileListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.FileList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) FileCreate(context.Context, *connect.Request[v1.FileCreateRequest]) (*connect.Response[v1.FileCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.FileCreate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) FileCreateBulk(context.Context, *connect.Request[v1.FileCreateBulkRequest]) (*connect.Response[v1.FileCreateBulkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.FileCreateBulk is not implemented"))
}

func (UnimplementedDevkitServiceHandler) FileDelete(context.Context, *connect.Request[v1.FileDeleteRequest]) (*connect.Response[v1.FileDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.FileDelete is not implemented"))
}

func (UnimplementedDevkitServiceHandler) ImportTable(context.Context, *connect.Request[v1.ImportTableRequest]) (*connect.Response[v1.ImportTableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.ImportTable is not implemented"))
}

func (UnimplementedDevkitServiceHandler) EmailSend(context.Context, *connect.Request[v1.EmailSendRequest]) (*connect.Response[v1.EmailSendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.EmailSend is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TranslationList(context.Context, *connect.Request[v1.TranslationListRequest]) (*connect.Response[v1.TranslationListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TranslationList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TranslationFindLocale(context.Context, *connect.Request[v1.TranslationFindLocaleRequest]) (*connect.Response[v1.TranslationFindLocaleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TranslationFindLocale is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TranslationCreateUpdateBulk(context.Context, *connect.Request[v1.TranslationCreateUpdateBulkRequest]) (*connect.Response[v1.TranslationCreateUpdateBulkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TranslationCreateUpdateBulk is not implemented"))
}

func (UnimplementedDevkitServiceHandler) TranslationDelete(context.Context, *connect.Request[v1.TranslationDeleteRequest]) (*connect.Response[v1.TranslationDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.TranslationDelete is not implemented"))
}

func (UnimplementedDevkitServiceHandler) RoleList(context.Context, *connect.Request[v1.RoleListRequest]) (*connect.Response[v1.RoleListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.RoleList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) RoleListInput(context.Context, *connect.Request[v1.RoleListInputRequest]) (*connect.Response[v1.RoleListInputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.RoleListInput is not implemented"))
}

func (UnimplementedDevkitServiceHandler) RoleFindForUpdate(context.Context, *connect.Request[v1.RoleFindForUpdateRequest]) (*connect.Response[v1.RoleFindForUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.RoleFindForUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) RoleCreateUpdate(context.Context, *connect.Request[v1.RoleCreateUpdateRequest]) (*connect.Response[v1.RoleCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.RoleCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) RoleDeleteRestore(context.Context, *connect.Request[v1.RoleDeleteRestoreRequest]) (*connect.Response[v1.RoleDeleteRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.RoleDeleteRestore is not implemented"))
}

func (UnimplementedDevkitServiceHandler) RoleDelete(context.Context, *connect.Request[v1.RoleDeleteRequest]) (*connect.Response[v1.RoleDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.RoleDelete is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserList(context.Context, *connect.Request[v1.UserListRequest]) (*connect.Response[v1.UserListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserListInput(context.Context, *connect.Request[v1.UserListInputRequest]) (*connect.Response[v1.UserListInputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserListInput is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserTypeListInput(context.Context, *connect.Request[v1.UserTypeListInputRequest]) (*connect.Response[v1.UserTypeListInputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserTypeListInput is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserFindForUpdate(context.Context, *connect.Request[v1.UserFindForUpdateRequest]) (*connect.Response[v1.UserFindForUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserFindForUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserCreateUpdate(context.Context, *connect.Request[v1.UserCreateUpdateRequest]) (*connect.Response[v1.UserCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserDeleteRestore(context.Context, *connect.Request[v1.UserDeleteRestoreRequest]) (*connect.Response[v1.UserDeleteRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserDeleteRestore is not implemented"))
}

func (UnimplementedDevkitServiceHandler) UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.UserDelete is not implemented"))
}

func (UnimplementedDevkitServiceHandler) AuthLogin(context.Context, *connect.Request[v1.AuthLoginRequest]) (*connect.Response[v1.AuthLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.AuthLogin is not implemented"))
}

func (UnimplementedDevkitServiceHandler) AuthRegister(context.Context, *connect.Request[v1.AuthRegisterRequest]) (*connect.Response[v1.AuthRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.AuthRegister is not implemented"))
}

func (UnimplementedDevkitServiceHandler) AuthInvite(context.Context, *connect.Request[v1.AuthInviteRequest]) (*connect.Response[v1.AuthInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.AuthInvite is not implemented"))
}

func (UnimplementedDevkitServiceHandler) AuthAuthorize(context.Context, *connect.Request[v1.AuthAuthorizeRequest]) (*connect.Response[v1.AuthAuthorizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.AuthAuthorize is not implemented"))
}

func (UnimplementedDevkitServiceHandler) AuthLoginProvider(context.Context, *connect.Request[v1.AuthLoginProviderRequest]) (*connect.Response[v1.AuthLoginProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.AuthLoginProvider is not implemented"))
}

func (UnimplementedDevkitServiceHandler) AuthLoginProviderCallback(context.Context, *connect.Request[v1.AuthLoginProviderCallbackRequest]) (*connect.Response[v1.AuthLoginProviderCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.AuthLoginProviderCallback is not implemented"))
}

func (UnimplementedDevkitServiceHandler) AuthResetPasswordEmail(context.Context, *connect.Request[v1.AuthResetPasswordEmailRequest]) (*connect.Response[v1.AuthResetPasswordEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.AuthResetPasswordEmail is not implemented"))
}

func (UnimplementedDevkitServiceHandler) AuthResetPassword(context.Context, *connect.Request[v1.AuthResetPasswordRequest]) (*connect.Response[v1.AuthResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.AuthResetPassword is not implemented"))
}

func (UnimplementedDevkitServiceHandler) PartialDeleteRestore(context.Context, *connect.Request[v1.PartialDeleteRestoreRequest]) (*connect.Response[v1.PartialDeleteRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.PartialDeleteRestore is not implemented"))
}

func (UnimplementedDevkitServiceHandler) PartialCreateUpdate(context.Context, *connect.Request[v1.PartialCreateUpdateRequest]) (*connect.Response[v1.PartialCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.PartialCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) PartialList(context.Context, *connect.Request[v1.PartialListRequest]) (*connect.Response[v1.PartialListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.PartialList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) PageDeleteRestore(context.Context, *connect.Request[v1.PageDeleteRestoreRequest]) (*connect.Response[v1.PageDeleteRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.PageDeleteRestore is not implemented"))
}

func (UnimplementedDevkitServiceHandler) PageCreateUpdate(context.Context, *connect.Request[v1.PageCreateUpdateRequest]) (*connect.Response[v1.PageCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.PageCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) PageList(context.Context, *connect.Request[v1.PageListRequest]) (*connect.Response[v1.PageListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.PageList is not implemented"))
}

func (UnimplementedDevkitServiceHandler) SectionDeleteRestore(context.Context, *connect.Request[v1.SectionDeleteRestoreRequest]) (*connect.Response[v1.SectionDeleteRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.SectionDeleteRestore is not implemented"))
}

func (UnimplementedDevkitServiceHandler) SectionCreateUpdate(context.Context, *connect.Request[v1.SectionCreateUpdateRequest]) (*connect.Response[v1.SectionCreateUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.SectionCreateUpdate is not implemented"))
}

func (UnimplementedDevkitServiceHandler) SectionList(context.Context, *connect.Request[v1.SectionListRequest]) (*connect.Response[v1.SectionListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devkit.v1.DevkitService.SectionList is not implemented"))
}
